# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1713+gbe5f05f3f\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-18 01:16+0000\n"
"PO-Revision-Date: 2021-09-18 05:21+0000\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124870/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/api/python/tir.rst:19
msgid "tvm.tir"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1
msgid "Namespace for Tensor-level IR"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1 ../../../python/tvm/tir/analysis/__init__.pydocstring
#: of tvm.tir.analysis:1
msgid "**Classes:**"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Buffer <tvm.tir.Buffer>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:1
msgid "Symbolic data buffer in TVM."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`DataProducer <tvm.tir.DataProducer>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Layout <tvm.tir.Layout>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
"Layout is composed of upper cases, lower cases and numbers, where upper case"
" indicates a primal axis and the corresponding lower case with factor size "
"indicates the subordinate axis."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`BijectiveLayout <tvm.tir.BijectiveLayout>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid "Bijective mapping for two layouts (src-layout and dst-layout)."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Var <tvm.tir.Var>`\\ \\(name\\, dtype\\, tvm.ir.type.Type\\]\\, span\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Var:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1 ../../../python/tvm/tir/expr.pydocstring
#: of tvm.tir.expr.Var:1
msgid "Symbolic variable."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`SizeVar <tvm.tir.SizeVar>`\\ \\(name\\, dtype\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.SizeVar:2
msgid "Symbolic variable to represent a tensor index size"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Reduce <tvm.tir.Reduce>`\\ \\(combiner\\, src\\, rdom\\, condition\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Reduce:1
msgid "Reduce node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`FloatImm <tvm.tir.FloatImm>`\\ \\(dtype\\, value\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloatImm:1
msgid "Float constant."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`IntImm <tvm.tir.IntImm>`\\ \\(dtype\\, value\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IntImm:1
msgid "Int constant."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`StringImm <tvm.tir.StringImm>`\\ \\(value\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.StringImm:1
msgid "String constant."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Cast <tvm.tir.Cast>`\\ \\(dtype\\, value\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Cast:1
msgid "Cast expression."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Add <tvm.tir.Add>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Add:1
msgid "Add node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Sub <tvm.tir.Sub>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Sub:1
msgid "Sub node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Mul <tvm.tir.Mul>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Mul:1
msgid "Mul node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Div <tvm.tir.Div>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Div:1
msgid "Div node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Mod <tvm.tir.Mod>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Mod:1
msgid "Mod node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`FloorDiv <tvm.tir.FloorDiv>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloorDiv:1
msgid "FloorDiv node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`FloorMod <tvm.tir.FloorMod>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloorMod:1
msgid "FloorMod node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Min <tvm.tir.Min>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Min:1
msgid "Min node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Max <tvm.tir.Max>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Max:1
msgid "Max node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`EQ <tvm.tir.EQ>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.EQ:1
msgid "EQ node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`NE <tvm.tir.NE>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.NE:1
msgid "NE node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`LT <tvm.tir.LT>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.LT:1
msgid "LT node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`LE <tvm.tir.LE>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.LE:1
msgid "LE node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`GT <tvm.tir.GT>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.GT:1
msgid "GT node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`GE <tvm.tir.GE>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.GE:1
msgid "GE node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`And <tvm.tir.And>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.And:1
msgid "And node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Or <tvm.tir.Or>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Or:1
msgid "Or node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Not <tvm.tir.Not>`\\ \\(a\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Not:1
msgid "Not node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`Select <tvm.tir.Select>`\\ \\(condition\\, true\\_value\\, "
"false\\_value\\[\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Select:1
msgid "Select node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`BufferLoad <tvm.tir.BufferLoad>`\\ \\(buffer\\, indices\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.BufferLoad:1
msgid "Buffer load node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`ProducerLoad <tvm.tir.ProducerLoad>`\\ \\(producer\\, indices\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.ProducerLoad:1
msgid "Producer load node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`Load <tvm.tir.Load>`\\ \\(dtype\\, buffer\\_var\\, index\\[\\, "
"predicate\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Load:1
msgid "Load node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Ramp <tvm.tir.Ramp>`\\ \\(base\\, stride\\, lanes\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Ramp:1
msgid "Ramp node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Broadcast <tvm.tir.Broadcast>`\\ \\(value\\, lanes\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Broadcast:1
msgid "Broadcast node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Shuffle <tvm.tir.Shuffle>`\\ \\(vectors\\, indices\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Shuffle:1
msgid "Shuffle node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Call <tvm.tir.Call>`\\ \\(dtype\\, op\\, args\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Call:1
msgid "Call node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`CallEffectKind <tvm.tir.CallEffectKind>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.CallEffectKind:1
msgid "Possible kinds of Call effects."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Let <tvm.tir.Let>`\\ \\(var\\, value\\, body\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Let:1
msgid "Let node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`IterVar <tvm.tir.IterVar>`\\ \\(dom\\, var\\, iter\\_type\\[\\, "
"thread\\_tag\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:1
msgid "Represent iteration variable."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Any <tvm.tir.Any>`\\ \\(\\[span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Any:1
msgid "Any node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Stmt <tvm.tir.Stmt>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Stmt:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1 ../../../python/tvm/tir/stmt.pydocstring
#: of tvm.tir.stmt.Stmt:1
msgid "Base class of all the statements."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`LetStmt <tvm.tir.LetStmt>`\\ \\(var\\, value\\, body\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.LetStmt:1
msgid "LetStmt node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`AssertStmt <tvm.tir.AssertStmt>`\\ \\(condition\\, message\\, "
"body\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AssertStmt:1
msgid "AssertStmt node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`ForKind <tvm.tir.ForKind>`\\ \\(value\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ForKind:1
msgid "The kind of the for loop."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`For <tvm.tir.For>`\\ \\(loop\\_var\\, min\\_val\\, extent\\, kind\\, "
"body\\[\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.For:1
msgid "For node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`While <tvm.tir.While>`\\ \\(condition\\, body\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.While:1
msgid "While node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`BufferStore <tvm.tir.BufferStore>`\\ \\(buffer\\, value\\, "
"indices\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferStore:1
msgid "Buffer store node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`BufferRealize <tvm.tir.BufferRealize>`\\ \\(buffer\\, bounds\\, "
"condition\\, body\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRealize:1
msgid "Buffer realize node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`Store <tvm.tir.Store>`\\ \\(buffer\\_var\\, value\\, index\\[\\, "
"predicate\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Store:1
msgid "Store node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`ProducerStore <tvm.tir.ProducerStore>`\\ \\(producer\\, value\\, "
"indices\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerStore:1
msgid "ProducerStore node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`Allocate <tvm.tir.Allocate>`\\ \\(buffer\\_var\\, dtype\\, extents\\, "
"...\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Allocate:1
msgid "Allocate node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`AttrStmt <tvm.tir.AttrStmt>`\\ \\(node\\, attr\\_key\\, value\\, "
"body\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AttrStmt:1
msgid "AttrStmt node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`ProducerRealize <tvm.tir.ProducerRealize>`\\ \\(producer\\, bounds\\, "
"condition\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerRealize:1
msgid "ProducerRealize node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`SeqStmt <tvm.tir.SeqStmt>`\\ \\(seq\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.SeqStmt:1
msgid "Sequence of statements."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`IfThenElse <tvm.tir.IfThenElse>`\\ \\(condition\\, then\\_case\\, "
"else\\_case\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.IfThenElse:1
msgid "IfThenElse node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Evaluate <tvm.tir.Evaluate>`\\ \\(value\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Evaluate:1
msgid "Evaluate node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`Prefetch <tvm.tir.Prefetch>`\\ \\(buffer\\, bounds\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Prefetch:1
msgid "Prefetch node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`BufferRegion <tvm.tir.BufferRegion>`\\ \\(buffer\\, region\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRegion:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1 ../../../python/tvm/tir/stmt.pydocstring
#: of tvm.tir.stmt.BufferRegion:1
msgid "BufferRegion node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`MatchBufferRegion <tvm.tir.MatchBufferRegion>`\\ \\(buffer\\, source\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.MatchBufferRegion:1
msgid "MatchBufferRegion node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`Block <tvm.tir.Block>`\\ \\(iter\\_vars\\, reads\\, writes\\, "
"name\\_hint\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1 ../../../python/tvm/tir/stmt.pydocstring
#: of tvm.tir.stmt.Block:1
msgid "Block node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`BlockRealize <tvm.tir.BlockRealize>`\\ \\(iter\\_values\\, "
"predicate\\, bool\\]\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BlockRealize:1
msgid "BlockRealize node."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`PrimFunc <tvm.tir.PrimFunc>`\\ \\(params\\, body\\[\\, ret\\_type\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:1
msgid "A function declaration expression."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`StmtSRef <tvm.tir.StmtSRef>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.StmtSRef:1
msgid ""
"An object that refers to schedulable elements in the TensorIR, aka \"sref\"."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`BlockScope <tvm.tir.BlockScope>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope:1
msgid ""
"An object corresponds to each block sref in the sref tree, which tracks the "
"producer-consumer dependency between blocks."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`ScheduleState <tvm.tir.ScheduleState>`\\ \\(mod\\, "
"tvm.ir.module.IRModule\\]\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState:1
msgid ""
"The state of scheduling, which exposes a `Replace` method as the primary "
"resort for all the scheduling primitives to manipulate the TensorIR."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`Schedule <tvm.tir.Schedule>`\\ \\(mod\\, tvm.ir.module.IRModule\\]\\, "
"\\*\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:1
msgid "The user-facing schedule class"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1 ../../../python/tvm/tir/analysis/__init__.pydocstring
#: of tvm.tir.analysis:1 ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor:1
msgid "**Functions:**"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`decl_buffer <tvm.tir.decl_buffer>`\\ \\(shape\\[\\, dtype\\, name\\, "
"data\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:1
msgid "Declare a new symbolic buffer."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`bijective_layout <tvm.tir.bijective_layout>`\\ \\(src\\_layout\\, "
"dst\\_layout\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.bijective_layout:1
msgid "Create a bijective layout mapping."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`layout <tvm.tir.layout>`\\ \\(layout\\_str\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.layout:1
msgid "Create a layout node from a string."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`stmt_seq <tvm.tir.stmt_seq>`\\ \\(\\*args\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.stmt.stmt_seq:1
msgid "Make sequence of statements"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`stmt_list <tvm.tir.stmt_list>`\\ \\(stmt\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.stmt.stmt_list:1
msgid "Make list of stmt from blocks."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`call_packed <tvm.tir.call_packed>`\\ \\(\\*args\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:1
msgid "Build expression by call an external packed function."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`call_intrin <tvm.tir.call_intrin>`\\ \\(dtype\\, func\\_name\\, "
"\\*args\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_intrin:1
msgid "Build expression by calling an intrinsic function."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`call_pure_extern <tvm.tir.call_pure_extern>`\\ \\(dtype\\, "
"func\\_name\\, \\*args\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_pure_extern:1
msgid "Build expression by calling a pure extern function."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`call_extern <tvm.tir.call_extern>`\\ \\(dtype\\, func\\_name\\, "
"\\*args\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_extern:1
msgid "Build expression by calling a extern function."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`call_llvm_intrin <tvm.tir.call_llvm_intrin>`\\ \\(dtype\\, name\\, "
"\\*args\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_llvm_intrin:1
msgid "Build expression by calling a llvm intrinsic function"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`call_llvm_pure_intrin <tvm.tir.call_llvm_pure_intrin>`\\ \\(dtype\\, "
"name\\, \\*args\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_llvm_pure_intrin:1
msgid "Build expression by calling a pure llvm intrinsic function"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`ret <tvm.tir.ret>`\\ \\(val\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ret:1
msgid "Create a tir return expression"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`all <tvm.tir.all>`\\ \\(\\*args\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.all:2
msgid "Create a new expression of the intersection of all conditions in the"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`any <tvm.tir.any>`\\ \\(\\*args\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.any:1
msgid ""
"Create a new experssion of the union of all conditions in the arguments"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`min_value <tvm.tir.min_value>`\\ \\(dtype\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.min_value:1
msgid "minimum value of dtype"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`max_value <tvm.tir.max_value>`\\ \\(dtype\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.max_value:1
msgid "maximum value of dtype"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`trace <tvm.tir.trace>`\\ \\(args\\[\\, trace\\_action\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trace:1
msgid "Trace tensor data at the runtime."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`exp <tvm.tir.exp>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp:1
msgid "Take exponential of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`exp2 <tvm.tir.exp2>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp2:1
msgid "Calculate 2**x"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`exp10 <tvm.tir.exp10>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp10:1
msgid "Calculate 10**x"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`log <tvm.tir.log>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log:1
msgid "Take log of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`log2 <tvm.tir.log2>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log2:1
msgid "Take log2 of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`log10 <tvm.tir.log10>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log10:1
msgid "Take log10 of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`log1p <tvm.tir.log1p>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log1p:1
msgid "Take log(x + 1) with respect to input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`ldexp <tvm.tir.ldexp>`\\ \\(x1\\, x2\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ldexp:1
msgid "Returns x1 * (2 ** x2)."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`clz <tvm.tir.clz>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.clz:1
msgid "Count leading zero bits of an integer x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`sin <tvm.tir.sin>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sin:1
msgid "Take sin of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`sinh <tvm.tir.sinh>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sinh:1
msgid "Take sinh of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`asin <tvm.tir.asin>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asin:1
msgid "Take asin of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`asinh <tvm.tir.asinh>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asinh:1
msgid "Take asinh of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`cos <tvm.tir.cos>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cos:1
msgid "Take cos of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`cosh <tvm.tir.cosh>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cosh:1
msgid "Take cosh of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`acos <tvm.tir.acos>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acos:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acosh:1
msgid "Take acos of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`acosh <tvm.tir.acosh>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`tan <tvm.tir.tan>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tan:1
msgid "Take tan of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`tanh <tvm.tir.tanh>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tanh:1
msgid "Take hyperbolic tanh of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`atan <tvm.tir.atan>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan:1
msgid "Take atan of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`atan2 <tvm.tir.atan2>`\\ \\(x1\\, x2\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan2:1
msgid "Take arctan2(x1, x2)."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`atanh <tvm.tir.atanh>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atanh:1
msgid "Take atanh of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`erf <tvm.tir.erf>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.erf:1
msgid "Take gauss error function of the input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`sigmoid <tvm.tir.sigmoid>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sigmoid:1
msgid "Quick function to get sigmoid"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`sqrt <tvm.tir.sqrt>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sqrt:1
msgid "Take square root of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`rsqrt <tvm.tir.rsqrt>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.rsqrt:1
msgid "Take reciprocal of square root of input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`floor <tvm.tir.floor>`\\ \\(x\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floor:1
msgid "Take floor of float input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`ceil <tvm.tir.ceil>`\\ \\(x\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ceil:1
msgid "Take ceil of float input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`hypot <tvm.tir.hypot>`\\ \\(x1\\, x2\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.hypot:1
msgid "Equivalent to sqrt(x1**2 + x2**2), element-wise."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`trunc <tvm.tir.trunc>`\\ \\(x\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trunc:1
msgid "Get truncated value of the input."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`abs <tvm.tir.abs>`\\ \\(x\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.abs:1
msgid "Get absolute value of the input element-wise."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`round <tvm.tir.round>`\\ \\(x\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.round:1
msgid "Round elements of the array to the nearest integer."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`nextafter <tvm.tir.nextafter>`\\ \\(x1\\, x2\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nextafter:1
msgid "Return the next floating-point value after x1 towards x2."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`nearbyint <tvm.tir.nearbyint>`\\ \\(x\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`power <tvm.tir.power>`\\ \\(x\\, y\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.power:1
msgid "x power y"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`popcount <tvm.tir.popcount>`\\ \\(x\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.popcount:1
msgid "Count the number of set bits in input x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`fmod <tvm.tir.fmod>`\\ \\(x\\, y\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.fmod:1
msgid "Return the remainder of x divided by y with the same sign as x."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`if_then_else <tvm.tir.if_then_else>`\\ \\(cond\\, t\\, f\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.if_then_else:1
msgid "Conditional selection expression."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`isnan <tvm.tir.isnan>`\\ \\(x\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isnan:1
msgid "Check if input value is Nan."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`isfinite <tvm.tir.isfinite>`\\ \\(x\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isfinite:1
msgid "Check if input value is finite."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`isinf <tvm.tir.isinf>`\\ \\(x\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isinf:1
msgid "Check if input value is infinite."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`copysign <tvm.tir.copysign>`\\ \\(x1\\, x2\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.copysign:1
msgid "Change the sign of x1 to that of x2, element-wise."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`div <tvm.tir.div>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.div:1
msgid "Compute a / b as in C/C++ semantics."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`indexdiv <tvm.tir.indexdiv>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexdiv:1
msgid "Compute floor(a / b) where a and b are non-negative."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`indexmod <tvm.tir.indexmod>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid "Compute the remainder of indexdiv."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`truncdiv <tvm.tir.truncdiv>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncdiv:1
msgid "Compute the truncdiv of two expressions."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`truncmod <tvm.tir.truncmod>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncmod:1
msgid "Compute the truncmod of two expressions."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`floordiv <tvm.tir.floordiv>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floordiv:1
msgid "Compute the floordiv of two expressions."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`floormod <tvm.tir.floormod>`\\ \\(a\\, b\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floormod:1
msgid "Compute the floormod of two expressions."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
":obj:`comm_reducer <tvm.tir.comm_reducer>`\\ \\(fcombine\\, fidentity\\[\\, "
"name\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.comm_reducer:1
msgid "Create a commutative reducer for reduction."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`min <tvm.tir.min>`\\ \\(expr\\, axis\\[\\, where\\, init\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:1
msgid "Create a min expression over axis."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`max <tvm.tir.max>`\\ \\(expr\\, axis\\[\\, where\\, init\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:1
msgid "Create a max expression over axis."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`sum <tvm.tir.sum>`\\ \\(expr\\, axis\\[\\, where\\, init\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:1
msgid "Create a sum expression over axis."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ":obj:`q_multiply_shift <tvm.tir.q_multiply_shift>`\\ \\(x\\, y\\, q\\, s\\)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1:<autosummary>:1
msgid ""
"Execute a multiplication between two Q-numbers x and y followed by a right "
"shift s."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir:1
msgid "**Exceptions:**"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer:1:<autosummary>:1
msgid ":obj:`ScheduleError <tvm.tir.ScheduleError>`\\"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.ScheduleError:1
msgid "Error that happens during TensorIR scheduling."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:3
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:3
msgid ""
"Buffer provide a way to represent data layout specialization of data "
"structure in TVM."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:6
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:6
msgid ""
"Do not construct directly, use :py:func:`~decl_buffer` instead. See the "
"documentation of :py:func:`decl_buffer` for more details."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:11
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:11
msgid ":obj:`decl_buffer`"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:12
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:12
msgid "Declare a buffer"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:1
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout:1
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout:1
#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:1
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.StmtSRef:1
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope:1
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:1
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer:1
#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:1
msgid "**Methods:**"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
msgid ""
":obj:`access_ptr <tvm.tir.Buffer.access_ptr>`\\ \\(access\\_mask\\[\\, "
"ptr\\_type\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1
msgid "Get an access pointer to the head of buffer."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
msgid ":obj:`vload <tvm.tir.Buffer.vload>`\\ \\(begin\\[\\, dtype\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:1
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:1
msgid "Generate an Expr that loads dtype from begin index."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
msgid ":obj:`vstore <tvm.tir.Buffer.vstore>`\\ \\(begin\\, value\\)"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:1 ../../../python/tvm/tir/buffer.pydocstring
#: of tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:1
msgid "Generate a Stmt that store value into begin index."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
msgid ":obj:`scope <tvm.tir.Buffer.scope>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
msgid "Return the storage scope associated with this buffer."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:3
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:3
msgid ""
"This is the recommended method to get buffer data ptress when interacting "
"with external functions."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:0
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:0
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.buffer.decl_buffer:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.index_of:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.factor_of:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_index:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_shape:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_shape:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.bijective_layout:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.layout:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Var:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.SizeVar:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Reduce:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.FloatImm:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.IntImm:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.StringImm:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Cast:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Add:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Sub:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Mul:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Div:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Mod:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.FloorDiv:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.FloorMod:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Min:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Max:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.EQ:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.NE:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.LT:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.LE:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.GT:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.GE:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.And:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Or:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Not:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Select:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.BufferLoad:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.ProducerLoad:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Load:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Ramp:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Broadcast:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Shuffle:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Call:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.Let:0 ../../../python/tvm/tir/expr.pydocstring of
#: tvm.tir.expr.IterVar:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.LetStmt:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.AssertStmt:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.For:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.While:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.BufferStore:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.BufferRealize:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Store:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.ProducerStore:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Allocate:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.AttrStmt:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.ProducerRealize:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.SeqStmt:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.IfThenElse:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Evaluate:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Prefetch:0 ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.stmt.stmt_seq:0 ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.stmt.stmt_list:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.BufferRegion:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.MatchBufferRegion:0 ../../../python/tvm/tir/stmt.pydocstring
#: of tvm.tir.stmt.Block:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.BlockRealize:0 ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc:0 ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:0
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_intrin:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_pure_extern:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_extern:0 ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_llvm_intrin:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_llvm_pure_intrin:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ret:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.all:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.any:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.min_value:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.max_value:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trace:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp2:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp10:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log2:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log10:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log1p:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ldexp:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.clz:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sin:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sinh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asin:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asinh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cos:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cosh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acos:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acosh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tan:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tanh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan2:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atanh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.erf:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sigmoid:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sqrt:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.rsqrt:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floor:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ceil:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.hypot:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trunc:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.abs:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.round:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nextafter:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nearbyint:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.power:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.popcount:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.fmod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.if_then_else:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isnan:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isfinite:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isinf:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.copysign:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.div:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexdiv:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexmod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncdiv:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncmod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floordiv:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floormod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.comm_reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:0
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_src:0
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_dst:0
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState:0
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:0
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_block_scope:0
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.replace:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.seed:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.show:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_sref:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.remove_rv:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.sample_categorical:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_block:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_loops:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fuse:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reorder:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.parallel:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.vectorize:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.bind:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.unroll:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_inline:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Apply:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Filter:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.HoistIfThenElse:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectCopyIntrin:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LiftAttrScope:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MakePackedAPI:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.NarrowDataType:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageFlatten:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.ThreadSync:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.VectorizeLoop:0
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:0
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:0
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:0
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:0 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.BufferRegion:0 ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc:0 ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:0
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:0
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Var:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_read_write_region:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_gpu_code:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_memory:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_ssa:0
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:0
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.post_order_visit:0
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.substitute:0
msgid "Parameters"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:6
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:6
msgid ""
"The access pattern MASK. Indicate whether the access will read or write to "
"the data content."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:9
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:9
msgid ""
"The data type of the result pointer. Do not specify unless we want to cast "
"pointer to specific type."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:12
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:12
msgid ""
"The number of lanes for the data type. This value is greater than one for "
"vector types."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:15
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:15
msgid ""
"The offset of pointer. We can use it to offset by the number of elements "
"from the address of ptr."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:20
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:7
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fuse:13
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:21
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reorder:15
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.parallel:12
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.vectorize:12
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.bind:20
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.unroll:7
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:18
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:18
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:26
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:23
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_inline:17
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:20
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:70
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:18
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:25
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:20
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:7
msgid "Examples"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:3
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:3 ../../../python/tvm/tir/buffer.pydocstring
#: of tvm.tir.buffer.Buffer.vload:3 ../../../python/tvm/tir/buffer.pydocstring
#: of tvm.tir.buffer.Buffer.vstore:3
msgid "The beginning index in unit of Buffer.dtype"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:5
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:5
msgid ""
"The data type to be loaded, can be vector type which have lanes that is "
"multiple of Buffer.dtype"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:0
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.buffer.decl_buffer:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.index_of:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.factor_of:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_index:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_shape:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_shape:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.bijective_layout:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.layout:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.stmt.stmt_seq:0 ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.stmt.stmt_list:0 ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:0
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_intrin:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_pure_extern:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_extern:0 ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_llvm_intrin:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_llvm_pure_intrin:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ret:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.all:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.any:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.min_value:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.max_value:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trace:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp2:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp10:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log2:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log10:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log1p:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ldexp:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.clz:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sin:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sinh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asin:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asinh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cos:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cosh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acos:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acosh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tan:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tanh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan2:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atanh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.erf:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sigmoid:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sqrt:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.rsqrt:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floor:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ceil:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.hypot:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trunc:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.abs:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.round:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nextafter:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nearbyint:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.power:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.popcount:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.fmod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.if_then_else:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isnan:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isfinite:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isinf:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.copysign:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.div:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexdiv:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexmod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncdiv:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncmod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floordiv:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floormod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.comm_reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:0
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_src:0
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_dst:0
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:0
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_block_scope:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.copy:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fork_seed:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.show:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_sref:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.sample_categorical:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_block:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_loops:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fuse:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Apply:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16CastElimination:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16Legalize:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16Promote:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16TypeLowering:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CoProcSync:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CombineContextCall:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CompactBufferAllocation:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.ConvertBlocksToOpaque:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.DecorateDeviceScope:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Filter:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.FlattenBuffer:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.HoistIfThenElse:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InferFragment:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectCopyIntrin:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectDoubleBuffer:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectPrefetch:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectVirtualThread:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InstrumentBoundCheckers:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LegalizePackedCalls:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LiftAttrScope:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LoopPartition:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerCustomDatatypes:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerDeviceStorageAccessInfo:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerInitBlock:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerIntrin:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerMatchBuffer:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerTVMBuiltin:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerThreadAllreduce:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerWarpMemory:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MakePackedAPI:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MakeUnpackedAPI:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MergeDynamicSharedMemoryAllocations:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.NarrowDataType:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.PlanAndUpdateBufferAllocationLocation:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.RemoveNoOp:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.RewriteUnsafeSelect:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Simplify:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.SkipAssert:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.SplitHostDevice:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageFlatten:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageRewrite:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.TextureFlatten:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.ThreadSync:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.UnifyThreadBinding:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.UnrollLoop:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.VectorizeLoop:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.VerifyMemory:0
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:0
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:0 ../../../python/tvm/tir/function.pydocstring
#: of tvm.tir.function.PrimFunc.with_body:0
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_read_write_region:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_gpu_code:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_memory:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_ssa:0
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:0
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.substitute:0
msgid "Returns"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:9
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:9
msgid "**load** -- The corresponding load expression."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:0
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.buffer.decl_buffer:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.index_of:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.factor_of:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_index:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_shape:0
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_shape:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.bijective_layout:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.layout:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.stmt.stmt_seq:0 ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.stmt.stmt_list:0 ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:0
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_intrin:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_pure_extern:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_extern:0 ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_llvm_intrin:0 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_llvm_pure_intrin:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ret:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.all:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.any:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.min_value:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.max_value:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trace:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp2:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp10:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log2:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log10:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log1p:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ldexp:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.clz:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sin:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sinh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asin:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asinh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cos:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cosh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acos:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acosh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tan:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tanh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan2:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atanh:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.erf:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sigmoid:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sqrt:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.rsqrt:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floor:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ceil:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.hypot:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trunc:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.abs:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.round:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nextafter:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nearbyint:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.power:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.popcount:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.fmod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.if_then_else:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isnan:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isfinite:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isinf:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.copysign:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.div:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexdiv:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexmod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncdiv:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncmod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floordiv:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floormod:0
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.comm_reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:0
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:0
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_src:0
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_dst:0
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:0
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_block_scope:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.copy:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fork_seed:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.show:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_sref:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.sample_categorical:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_block:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_loops:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fuse:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:0
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Apply:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16CastElimination:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16Legalize:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16Promote:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16TypeLowering:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CoProcSync:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CombineContextCall:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CompactBufferAllocation:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.ConvertBlocksToOpaque:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.DecorateDeviceScope:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Filter:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.FlattenBuffer:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.HoistIfThenElse:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InferFragment:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectCopyIntrin:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectDoubleBuffer:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectPrefetch:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectVirtualThread:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InstrumentBoundCheckers:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LegalizePackedCalls:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LiftAttrScope:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LoopPartition:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerCustomDatatypes:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerDeviceStorageAccessInfo:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerInitBlock:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerIntrin:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerMatchBuffer:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerTVMBuiltin:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerThreadAllreduce:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerWarpMemory:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MakePackedAPI:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MakeUnpackedAPI:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MergeDynamicSharedMemoryAllocations:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.NarrowDataType:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.PlanAndUpdateBufferAllocationLocation:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.RemoveNoOp:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.RewriteUnsafeSelect:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Simplify:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.SkipAssert:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.SplitHostDevice:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageFlatten:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageRewrite:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.TextureFlatten:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.ThreadSync:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.UnifyThreadBinding:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.UnrollLoop:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.VectorizeLoop:0
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.VerifyMemory:0
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.vload:0
#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:0 ../../../python/tvm/tir/function.pydocstring
#: of tvm.tir.function.PrimFunc.with_body:0
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_read_write_region:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_gpu_code:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_memory:0
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_ssa:0
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:0
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.substitute:0
msgid "Return type"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:5 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.ProducerStore:5 ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:5
msgid "The value to be stored."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.vstore:8 ../../../python/tvm/tir/buffer.pydocstring
#: of tvm.tir.buffer.Buffer.vstore:8
msgid "**store** -- The corresponding store stmt."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.scope:1
#: ../../../python/tvm/tir/buffer.pydocstring of tvm.tir.buffer.Buffer.scope:1
msgid ""
"Return the storage scope associated with this buffer. :returns: **scope** --"
" The storage scope associated with this buffer. :rtype: str"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:3
msgid ""
"Normally buffer is created automatically during lower and build. This is "
"only needed if user want to specify their own buffer layout."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:6
msgid "See the note below for detailed discussion on usage of buffer."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:8
msgid "The shape of the buffer."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:10 ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Allocate:5
msgid "The data type of the buffer."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:12
msgid "The name of the buffer."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:14
msgid "The data pointer in the buffer."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:16
msgid "The stride of the buffer."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:18
msgid ""
"The beginning offset of the array to data. In terms of number of elements of"
" dtype."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:21
msgid ""
"The storage scope of the buffer, if not global. If scope equals empty "
"string, it means it is global memory."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:24
msgid ""
"The alignment of data pointer in bytes. If -1 is passed, the alignment will "
"be set to TVM's internal default."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:27
msgid ""
"The factor of elem_offset field, when set, elem_offset is required to be "
"multiple of offset_factor. If 0 is pssed, the alignment will be set to 1. if"
" non-zero is passed, we will created a Var for elem_offset if elem_offset is"
" not None."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:32
msgid ""
"auto_broadcast buffer allows one to implement broadcast computation without "
"considering whether dimension size equals to one. TVM maps buffer[i][j][k] "
"-> buffer[i][0][k] if dimension j's shape equals 1."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:36
msgid "The location of the decl_buffer creation in the source."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:39
msgid "**buffer** -- The created buffer"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:43 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.comm_reducer:17 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.comm_reducer.<locals>.reducer:14
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:14
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:14
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CompactBufferAllocation:6
msgid "Example"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:44
msgid ""
"Here's an example of how broadcast buffer can be used to define a symbolic "
"broadcast operation,"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:67
msgid ""
"Buffer data structure reflects the DLTensor structure in dlpack. While "
"DLTensor data structure is very general, it is usually helpful to create "
"function that only handles specific case of data structure and make compiled"
" function benefit from it."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.buffer.decl_buffer:72
msgid ""
"If user pass strides and elem_offset is passed as None when constructing the"
" function, then the function will be specialized for the DLTensor that is "
"compact and aligned. If user pass a fully generic symbolic array to the "
"strides, then the resulting function becomes fully generic."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout:1
msgid ""
"Layout is composed of upper cases, lower cases and numbers, where upper case"
" indicates a primal axis and the corresponding lower case with factor size "
"indicates the subordinate axis. For example, NCHW16c can describe a 5-D "
"tensor of [batch_size, channel, height, width, channel_block]. Here "
"subordinate axis channel_block=16 is the factor size of the primal axis C "
"(channel)."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout:10
msgid ":obj:`layout`"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout:11
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout:15
msgid "Declare a layout"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.index_of:1:<autosummary>:1
msgid ":obj:`index_of <tvm.tir.Layout.index_of>`\\ \\(axis\\)"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.index_of:1:<autosummary>:1
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.index_of:1
msgid "Get the index of an axis"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.index_of:1:<autosummary>:1
msgid ":obj:`factor_of <tvm.tir.Layout.factor_of>`\\ \\(axis\\)"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.index_of:1:<autosummary>:1
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.factor_of:1
msgid "Get the factor size of the subordinate axis."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.index_of:3
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.factor_of:3
msgid "The axis name, need to be [a-z,A-Z]"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.index_of:6
msgid "**index** -- The index of the axis, -1 if not found."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.Layout.factor_of:6
msgid ""
"**factor** -- the size of the subordinate-axis of axis (if axis is a primal-"
"axis), or the size of axis itself (if axis is a subordinate-axis). Return -1"
" if axis is not in the layout."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout:1
msgid ""
"Bijective mapping for two layouts (src-layout and dst-layout). It provides "
"shape and index conversion between each other."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout:4
msgid ""
"Do not construct directly, use :any:`bijective_layout` instead. See the "
"documentation of :any:`bijective_layout` for more details."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout:7
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.bijective_layout:3
msgid "source layout."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout:9
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.bijective_layout:5
msgid "destination layout."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout:14
msgid ":obj:`bijective_layout`"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:1:<autosummary>:1
msgid ":obj:`forward_index <tvm.tir.BijectiveLayout.forward_index>`\\ \\(index\\)"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:1:<autosummary>:1
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:1
msgid "Given the indices of the src-layout, infer the dst index."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:1:<autosummary>:1
msgid ":obj:`backward_index <tvm.tir.BijectiveLayout.backward_index>`\\ \\(index\\)"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:1:<autosummary>:1
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_index:1
msgid "Given the indices of the dst-layout, infer the src index."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:1:<autosummary>:1
msgid ":obj:`forward_shape <tvm.tir.BijectiveLayout.forward_shape>`\\ \\(shape\\)"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:1:<autosummary>:1
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_shape:1
msgid "Given the shape of the src-layout, infer the dst shape."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:1:<autosummary>:1
msgid ":obj:`backward_shape <tvm.tir.BijectiveLayout.backward_shape>`\\ \\(shape\\)"
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:1:<autosummary>:1
#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_shape:1
msgid "Given the shape of the dst-layout, infer the src shape."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:3
msgid "The indices in src-layout."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_index:6
msgid "**dst_index** -- The inferred indices in dst-layout."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_index:3
msgid "The indices in dst-layout."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_index:6
msgid "**src_index** -- The inferred indices in src-layout."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_shape:3
msgid "The shape in src-layout."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.forward_shape:6
msgid "**dst_shape** -- The inferred shape in dst-layout."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_shape:3
msgid "The shape in dst-layout."
msgstr ""

#: ../../../python/tvm/tir/data_layout.pydocstring of
#: tvm.tir.data_layout.BijectiveLayout.backward_shape:6
msgid "**src_shape** -- The inferred shape in src-layout."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.bijective_layout:8
msgid "**bijective_layout** -- The created bijective layout"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.layout:3
msgid ""
"A layout representation is composed of upper cases, lower cases and numbers,"
" where upper case indicates a primal axis and the corresponding lower case "
"with factor size indicates the subordinate axis. For example, NCHW16c can "
"describe a 5-D tensor of [batch_size, channel, height, width, "
"channel_block]. Here subordinate axis channel_block=16 is the factor size of"
" the primal axis C (channel)."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.data_layout.layout:12
msgid "**layout** -- The created layout"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Var:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.SizeVar:4
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Var:3
msgid "The name"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Var:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.SizeVar:6
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloatImm:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IntImm:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Cast:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Var:5
msgid "The data type"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Var:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.SizeVar:8
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Reduce:15
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloatImm:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IntImm:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.StringImm:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Cast:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Add:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Sub:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Mul:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Div:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Mod:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloorDiv:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloorMod:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Min:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Max:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.EQ:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.NE:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.LT:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.LE:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.GT:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.GE:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.And:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Or:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Not:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Select:16
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.BufferLoad:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.ProducerLoad:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Load:11
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Ramp:9
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Broadcast:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Shuffle:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Call:10
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Let:9
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:13
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Any:4
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.LetStmt:9
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AssertStmt:9
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.For:18
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.While:7
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferStore:9
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRealize:11
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Store:11
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerStore:9
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Allocate:13
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AttrStmt:11
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerRealize:13
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.SeqStmt:5
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.IfThenElse:9
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Evaluate:5
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Prefetch:7
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc:13 ../../../python/tvm/tir/function.pydocstring
#: of tvm.tir.function.PrimFunc.with_body:5
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc:13 ../../../python/tvm/tir/function.pydocstring
#: of tvm.tir.function.PrimFunc.with_body:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Var:7
msgid "The location of this itervar in the source code."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.SizeVar:2
msgid "which is greater or equal to zero."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Reduce:3
msgid "The combiner."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Reduce:5
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:3
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:3
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:3
msgid "The source expression."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Reduce:7
msgid "The iteration domain"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Reduce:9
msgid "The reduce condition."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Reduce:11
msgid "The value index."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Reduce:13
msgid ""
"The initial value for output. This can be an int, float or ProducerLoad"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloatImm:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IntImm:5
msgid "The constant value."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.StringImm:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Cast:5
msgid "The value of the function."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Add:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Sub:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Mul:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Div:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Mod:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloorDiv:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloorMod:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Min:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Max:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.EQ:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.NE:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.LT:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.LE:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.GT:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.GE:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.And:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Or:3
msgid "The left hand operand."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Add:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Sub:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Mul:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Div:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Mod:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloorDiv:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.FloorMod:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Min:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Max:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.EQ:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.NE:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.LT:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.LE:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.GT:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.GE:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.And:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Or:5
msgid "The right hand operand."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Not:3
msgid "The input value"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Select:5
msgid ""
"Select may compute both true_value and false_value. Use "
":py:class:`tvm.tir.if_then_else` instead if you want to get a conditional "
"expression that only evaluates the correct branch."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Select:10
msgid "The condition expression."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Select:12
msgid "The value to take when condition is true."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Select:14
msgid "The value to take when condition is false."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.BufferLoad:3
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.ProducerLoad:3
msgid "The buffer to be loaded."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.BufferLoad:5
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.ProducerLoad:5
msgid "The buffer indices."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Load:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.min_value:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.max_value:3
msgid "The data type."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Load:5
msgid "The buffer variable in the load expression."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Load:7
msgid "The index in the load."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Load:9
msgid "The load predicate."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Ramp:3
msgid "The base expression."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Ramp:5
msgid "The stride of the ramp."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Ramp:7
#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Broadcast:5
msgid "The lanes of the expression."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Broadcast:3
msgid "The value of the expression."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Shuffle:3
msgid "The vectors"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Shuffle:5
msgid "The indices"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Call:3
msgid "The return data type"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Call:5
msgid "The function to be called, or the name to the global tvm.Op"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Call:8
msgid "The input arguments to the call"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Let:3
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.LetStmt:3
msgid "The variable in the binding."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Let:5
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.LetStmt:5
msgid "The value in to be binded."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Let:7
msgid "The body expression."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:3
msgid "IterVar represents axis iterations in the computation."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:5
msgid "The domain of the iteration."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:7
msgid "The internal variable that is used for iteration."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:9
msgid "The iteration type."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:11
msgid "The thread type tag."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:19
msgid ":obj:`te.thread_axis`"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:19
msgid "Create thread axis IterVar."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:21
msgid ":obj:`te.reduce_axis`"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.IterVar:22
msgid "Create reduce axis IterVar."
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.Any:3
msgid "span"
msgstr ""

#: ../../../python/tvm/tir/expr.pydocstring of tvm.tir.expr.AnyNone
msgid "Optional[Span]"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.LetStmt:7
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AssertStmt:7
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.For:11
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.While:5
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Allocate:11
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AttrStmt:9
msgid "The body statement."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AssertStmt:3
msgid "The assert condition."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AssertStmt:5
msgid "The error message."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ForKind:5
msgid ""
"ForKind can change the control flow semantics of the loop and need to be "
"considered in all TIR passes."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.For:3
msgid "The loop variable."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.For:5
msgid "The beginning value."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.For:7
msgid "The length of the loop."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.For:9
msgid "The type of the for."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.For:13
msgid "The thread this loop binds to. Only valid if kind is ThreadBinding"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.For:16
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:19
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:19
msgid "Additional annotation hints."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.While:3
msgid "The termination condition."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferStore:3
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRealize:3
msgid "The buffer."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferStore:5
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRealize:5
msgid "The value we to be stored."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferStore:7
msgid "The indices location to be stored."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRealize:7
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerRealize:7
msgid "The realize condition."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRealize:9
msgid "The body of the statement."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Store:3
msgid "The buffer Variable."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Store:5
msgid "The value we want to store."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Store:7
msgid "The index in the store expression."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Store:9
msgid "The store predicate."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerStore:3
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerRealize:3
msgid "The data producer."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerStore:7
msgid "The index arguments of the store."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Allocate:3
msgid "The buffer variable."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Allocate:7
msgid "The extents of the allocate"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Allocate:9
msgid "The condition."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AttrStmt:3
msgid "The node to annotate the attribute"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AttrStmt:5
msgid "Attribute type key."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.AttrStmt:7
msgid "The value of the attribute"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerRealize:5
msgid "The bound of realize"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerRealize:9
msgid "The realize body"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.ProducerRealize:11
msgid "The storage scope associated with this realization"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.SeqStmt:3
msgid "The statements"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.IfThenElse:3
msgid "The expression"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.IfThenElse:5
msgid "The statement to execute if condition is true."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.IfThenElse:7
msgid "The statement to execute if condition is false."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Evaluate:3
msgid "The expression to be evalued."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Prefetch:3
msgid "The buffer to be prefetched."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Prefetch:5
msgid "The bounds to be prefetched."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.stmt.stmt_seq:3
msgid "List of statements to be combined as sequence."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.stmt.stmt_seq:6
msgid "**stmt** -- The combined statement."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.stmt.stmt_list:6
msgid "**stmt_list** -- The unpacked list of statements"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRegion:3
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRegion:3
msgid "The buffer of the buffer region"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRegion:5
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BufferRegion:5
msgid "The region array of the buffer region"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.MatchBufferRegion:3
msgid "The target buffer"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.MatchBufferRegion:5
msgid "The region of source buffer"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:3
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:3
msgid "The block Variable."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:5
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:5
msgid "The read buffer regions of the block."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:7
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:7
msgid "The write buffer regions of the block."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:9
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:9
msgid "the name_hint of the block."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:11
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:11
msgid "The body of the block."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:13
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:13
msgid "The init block of the reduction block"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:15
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:15
msgid "The buffer allocations"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:17
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:17
msgid "The subregion buffer match"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:21
#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.Block:21
msgid "The location of this block in the source code."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BlockRealize:3
msgid "The binding values of the block var."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BlockRealize:5
msgid "The predicate of the block."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BlockRealize:7
msgid "The block to realize"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of tvm.tir.stmt.BlockRealize:9
msgid "The location of this block_realize in the source code."
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:3
#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:3
msgid "List of input parameters to the function."
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:5
#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:5
msgid "The body of the function."
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:7
#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:7
msgid "The return type annotation of the function."
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:9
#: ../../../python/tvm/tir/function.pydocstring of tvm.tir.function.PrimFunc:9
msgid "The buffer binding map."
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc:11 ../../../python/tvm/tir/function.pydocstring
#: of tvm.tir.function.PrimFunc:11
msgid "Attributes of the function, can be None"
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:1:<autosummary>:1
msgid ":obj:`with_body <tvm.tir.PrimFunc.with_body>`\\ \\(new\\_body\\[\\, span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:1:<autosummary>:1
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:1
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:1:<autosummary>:1
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:1
msgid "Create a new PrimFunc with the same set signatures but a new body."
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:1:<autosummary>:1
msgid ":obj:`specialize <tvm.tir.PrimFunc.specialize>`\\ \\(param\\_map\\)"
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:1:<autosummary>:1
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:1
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:1:<autosummary>:1
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:1
msgid "Specialize parameters of PrimFunc"
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:3
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:3
msgid "The new body."
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:8
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:8
msgid "**new_func** -- The created new function."
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:3
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:3
msgid "The mapping from function params to the instance"
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:8
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:8
msgid "We can define a Meta TIR function with symbolic shape:"
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:20
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:20
msgid "Then we can make it specialized with given shapes or buffers."
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:29
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:29
msgid "The specialized function:"
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:41
#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.specialize:41
msgid "**func** -- The new function with parameter specialized"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:3
msgid ""
"The argument to packed function can be Expr or Buffer. The argument is the "
"corresponding POD type when Expr is presented."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:6
msgid ""
"When the argument is Buffer, the corresponding PackedFunc will recieve an "
"TVMArrayHandle whose content is valid during the callback period. If the "
"PackedFunc is a python callback, then the corresponding argument is NDArray."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:10
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_intrin:10
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_pure_extern:7 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_extern:7 ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.trace:8
msgid "Positional arguments."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:12
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_intrin:12
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_pure_extern:9 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_extern:9 ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_llvm_intrin:9 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_llvm_pure_intrin:9
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.all:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.any:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.min_value:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.max_value:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floor:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ceil:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trunc:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.abs:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.round:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nearbyint:12
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.power:7
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isnan:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isfinite:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isinf:5
msgid "The location of this operator in the source code."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:15
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_intrin:15
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_pure_extern:12 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_extern:12 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_llvm_intrin:12
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_llvm_pure_intrin:12
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trace:13
msgid "**call** -- The call expression."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:20
msgid ":obj:`te.extern`"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_packed:21
msgid "Create tensor with extern function call."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_intrin:3
msgid ""
"Intrinsics can be overloaded with multiple data types via the intrinsic "
"translation rule."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_intrin:6
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_pure_extern:3 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_extern:3 ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_llvm_intrin:3 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_llvm_pure_intrin:3
msgid "The data type of the result."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.call_intrin:8
msgid "The intrinsic function name."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_pure_extern:5 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_extern:5
msgid "The extern function name."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_llvm_intrin:5 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_llvm_pure_intrin:5
msgid "The name of the llvm intrinsic function."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.call_llvm_intrin:7 ../../../python/tvm/tir/__init__.pydocstring
#: of tvm.tir.op.call_llvm_pure_intrin:7
msgid "Poistional arguments."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ret:3
msgid ""
"The returned tir expression, whose data type is int, float or void pointer."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ret:6
msgid "**ret** -- The return expression"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.all:2
msgid "arguments"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.all:4
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.any:3
msgid "List of symbolic boolean expressions"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.all:9
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.any:8
msgid "**expr** -- Expression"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.min_value:8
msgid "**value** -- The minimum value of dtype."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.max_value:8
msgid "**value** -- The maximum value of dtype."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trace:3
msgid ""
"The trace function allows to trace specific tensor at the runtime. The "
"tracing value should come as last argument. The trace action should be "
"specified, by default tvm.default_trace_action is used."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trace:10
msgid "The name of the trace action."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trace:18
msgid ":obj:`tvm.tir.call_packed`"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trace:19
msgid "Creates packed function."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp2:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp10:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log2:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log10:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log1p:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ldexp:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ldexp:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sin:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sinh:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asin:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asinh:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cos:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cosh:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acos:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acosh:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tan:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tanh:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan2:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan2:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atanh:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.erf:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sigmoid:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sqrt:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.rsqrt:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floor:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ceil:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.hypot:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.hypot:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trunc:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.abs:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.round:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nextafter:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nextafter:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nearbyint:10
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.power:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.popcount:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.fmod:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.fmod:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isnan:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isfinite:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isinf:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.copysign:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.copysign:5
msgid "Input argument."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp2:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.exp10:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log2:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log10:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.log1p:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ldexp:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.clz:7
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sin:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sinh:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asin:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.asinh:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cos:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.cosh:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acos:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.acosh:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tan:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.tanh:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atan2:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.atanh:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.erf:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sigmoid:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.sqrt:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.rsqrt:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floor:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.ceil:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.hypot:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trunc:11
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.abs:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.round:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nextafter:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nearbyint:15
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.popcount:6
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isnan:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isfinite:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.isinf:8
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.copysign:8
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:19
msgid "**y** -- The result."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.clz:3
msgid "Input 32 or 64 bit integer. The result is undefined if the input is 0."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.trunc:3
msgid ""
"The truncated value of the scalar x is the nearest integer i which is closer"
" to zero than x is."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.nearbyint:1
msgid ""
"Round elements of the array to the nearest integer. This intrinsic uses "
"llvm.nearbyint instead of llvm.round which is faster but will results "
"different from te.round. Notably nearbyint rounds according to the rounding "
"mode, whereas te.round (llvm.round) ignores that. For differences between "
"the two see: https://en.cppreference.com/w/cpp/numeric/math/round "
"https://en.cppreference.com/w/cpp/numeric/math/nearbyint"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.power:5
msgid "The exponent"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.power:10
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.fmod:8
msgid "**z** -- The result."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.if_then_else:3
msgid "The condition"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.if_then_else:5
msgid "The result expression if cond is true."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.if_then_else:7
msgid "The result expression if cond is false."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.if_then_else:9
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.div:7
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexdiv:7
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexmod:7
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncdiv:7
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncmod:7
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floordiv:7
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floormod:7
msgid "The location of this operator in the source."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.if_then_else:12
msgid "**result** -- The result of conditional expression."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.if_then_else:17
msgid ""
"Unlike Select, if_then_else will not execute the branch that does not "
"satisfy the condition. You can use it to guard against out of bound access. "
"Unlike Select, if_then_else cannot be vectorized if some lanes in the vector"
" have different conditions."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.div:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexdiv:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexmod:3
msgid "The left hand operand, known to be non-negative."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.div:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexdiv:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexmod:5
msgid "The right hand operand, known to be non-negative."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.div:10
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexdiv:10
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexmod:10
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncdiv:10
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncmod:10
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floordiv:10
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floormod:10
msgid "**res** -- The result expression."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.div:13
msgid "When operands are integers, returns truncdiv(a, b, span)."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexdiv:15
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexmod:15
msgid ""
"Use this function to split non-negative indices. This function may take "
"advantage of operands' non-negativeness."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.indexmod:1
msgid "Compute the remainder of indexdiv. a and b are non-negative."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncdiv:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncmod:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floordiv:3
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floormod:3
msgid "The left hand operand"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncdiv:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncmod:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floordiv:5
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.floormod:5
msgid "The right hand operand"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncdiv:13
#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.truncmod:13
msgid "This is the default integer division behavior in C."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.comm_reducer:3
msgid "A binary function which takes two Expr as input to return a Expr."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.comm_reducer:5
msgid "A function which takes a type string as input to return a const Expr."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.comm_reducer:8
msgid ""
"**reducer** -- A function which creates a reduce expression over axis. There"
" are two ways to use it:  1. accept (expr, axis, where) to produce an Reduce"
" Expr on    specified axis; 2. simply use it with multiple Exprs."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.comm_reducer:8
msgid ""
"**reducer** -- A function which creates a reduce expression over axis. There"
" are two ways to use it:"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.comm_reducer:11
msgid ""
"accept (expr, axis, where) to produce an Reduce Expr on specified axis;"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of tvm.tir.op.comm_reducer:13
msgid "simply use it with multiple Exprs."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:5
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:5
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:5
msgid "The reduction IterVar axis"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:7
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:7
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:7
msgid "Filtering predicate of the reduction."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:10
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:10
#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.comm_reducer.<locals>.reducer:10
msgid "**value** -- The result value."
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:1
msgid ""
"Execute a multiplication between two Q-numbers x and y followed by a right "
"shift s. The mathematical expression is:"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:4
msgid "out = round(x*y*2^-s)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:6
msgid ""
"More about Q-numbers here: https://en.wikipedia.org/wiki/Q_(number_format) "
"The rounding rule is to the nearest value, rounding half up (i.e., "
"round(x.1) = x and round (x.5) = x+1)"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:10
msgid "First Q-number"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:12
msgid "Second Q-number"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:14
msgid "Number of fractional bits in x and y. Needs to be > 0"
msgstr ""

#: ../../../python/tvm/tir/__init__.pydocstring of
#: tvm.tir.op.q_multiply_shift:16
msgid "Integer shift"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.StmtSRef:3
msgid ""
"Glossary - Block sref: An StmtSref that points to a TensorIR block. - Loop "
"sref: An StmtSRef that points to a TensorIR for loop. - Parent sref: The "
"parent sref of an sref is the block/loop sref that points to its closest "
"schedulable statement of its ancestors on the TensorIR AST. - Root sref: "
"Sref to the root block. Every sref has exactly one parent sref except for "
"root sref. - Sref tree: The parent-children-relationship of srefs that forms"
" a tree, uniquely determined by the TensorIR AST."
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.StmtSRef:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:1
msgid "**Attributes:**"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.StmtSRef:1:<autosummary>:1
msgid ":obj:`stmt <tvm.tir.StmtSRef.stmt>`\\"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.StmtSRef:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.StmtSRef.stmt:1
msgid "The block/for stmt the object refers to"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.StmtSRef:1:<autosummary>:1
msgid ":obj:`parent <tvm.tir.StmtSRef.parent>`\\"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.StmtSRef:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.StmtSRef.parent:1
msgid "The parent sref"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.StmtSRef.stmt:1:<autosummary>:1
msgid ":obj:`inline_mark <tvm.tir.StmtSRef.inline_mark>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.StmtSRef.stmt:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.StmtSRef.inline_mark:1
msgid ""
"A special StmtSRef, which doesn't point to any stmt in the AST, only serving"
" as a \"mark\" to hint compute-at to do the work of compute-inline"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.StmtSRef.stmt:1:<autosummary>:1
msgid ":obj:`root_mark <tvm.tir.StmtSRef.root_mark>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.StmtSRef.stmt:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.StmtSRef.root_mark:1
msgid ""
"A special StmtSRef, which doesn't point to any stmt in the AST, only serving"
" as a \"mark\" to hint compute-at to do nothing"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope:4
msgid "Glossary:"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope:6
msgid ""
"Block scope: A contiguous subtree of the sref tree, rooted at each block "
"sref, whose components are:"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope:9
msgid "scope root: a block sref"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope:10
msgid "internal srefs: loop srefs"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope:11
msgid "scope leaves: block srefs"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope:13
msgid ""
"Child block: The scope leaf blocks under the scope root or a specific "
"internal sref"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_src:1:<autosummary>:1
msgid ":obj:`get_deps_by_src <tvm.tir.BlockScope.get_deps_by_src>`\\ \\(block\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_src:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_src:1
msgid "Get all dependencies whose `src` is the target`block`."
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_src:1:<autosummary>:1
msgid ":obj:`get_deps_by_dst <tvm.tir.BlockScope.get_deps_by_dst>`\\ \\(block\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_src:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_dst:1
msgid "Get all dependencies whose `dst` is the target `block`."
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_src:3
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_dst:3
msgid "The queried block"
msgstr ""

#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_src:6
#: ../../../python/tvm/tir/schedule/block_scope.pydocstring of
#: tvm.tir.schedule.block_scope.BlockScope.get_deps_by_dst:6
msgid "**blocks** -- The dependencies"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState:4
msgid ""
"The data structure contains the following information 1) The AST being "
"scheduled (mod) 2) The sref tree of schedulable statements (indicated by the"
" srefs) 3) The dependency information of each block scope (block_info) 4) A "
"reverse mapping from the AST nodes to that in the sref tree (get_sref) 5) A "
"debug flag, if set, extra checking is enabled (debug_mask)"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState:11
msgid "The AST of the module being scheduled"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState:13
msgid ""
"Do extra correctness checking after the object construction and each time "
"after calling the Replace method."
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:1:<autosummary>:1
msgid ":obj:`get_sref <tvm.tir.ScheduleState.get_sref>`\\ \\(stmt\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:1
msgid "Return the corresponding sref that points to the stmt"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:1:<autosummary>:1
msgid ""
":obj:`get_block_scope <tvm.tir.ScheduleState.get_block_scope>`\\ "
"\\(block\\_sref\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_block_scope:1
msgid "Get the BlockScope correpsonding to the block sref"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:1:<autosummary>:1
msgid ""
":obj:`replace <tvm.tir.ScheduleState.replace>`\\ \\(src\\_sref\\, "
"tgt\\_stmt\\[\\, block\\_sref\\_reuse\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:1:<autosummary>:1
msgid ""
"Replace the part of the AST, as being pointed to by `src_sref`, with a "
"specific statement `tgt_stmt`, and maintain the sref tree accordingly."
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:3
msgid "The schedulable statement in the TensorIR to be retrieved for its sref"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_sref:6
#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_block_scope:6
msgid "**sref** -- The corresponding sref"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.get_block_scope:3
msgid "The block sref to be retrieved"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.replace:1
msgid ""
"Replace the part of the AST, as being pointed to by `src_sref`, with a "
"specific statement `tgt_stmt`, and maintain the sref tree accordingly. "
"Replace will try to perform copy on write as much as possible when the "
"ScheduleState holds the only copy to the IRModule and IR nodes."
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.replace:6
msgid ""
"Only 3 types of replacements are allowed: from `src_sref->stmt` to "
"`tgt_stmt`. 1) Block -> Block 2) Loop -> Loop 3) Loop -> BlockRealize"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.replace:11
msgid "The sref to the statement to be replaced in the TensorIR AST"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.replace:13
msgid "The statement to be replaced to"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.replace:15
msgid ""
"Maps an old block (to be replaced in the subtree under `src_sref->stmt`) to "
"a new block (replaced to, in the subtree under `tgt_stmt`), and enforces "
"reuse of srefs between them (rather than create new srefs) i.e. after being "
"replaced, the sref that points to the old block will point to the new one"
msgstr ""

#: ../../../python/tvm/tir/schedule/state.pydocstring of
#: tvm.tir.schedule.state.ScheduleState.replace:21
msgid ""
"The reuse of loop srefs are detected automatically according to the reuse of"
" loop vars."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:3
msgid ""
"A schedule is a set of transformations that change the order of computation "
"but preserve the semantics of computation. Some example of schedules: 1) "
"Split a loop into two; 2) Reorder two loops; 3) Inline the computation of a "
"specific buffer into its consumer"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:9
msgid ""
"The schedule class stores auxiliary information to schedule correctly and "
"efficiently."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:11
msgid ""
"Link to tutorial: "
"https://tvm.apache.org/docs/tutorials/language/schedule_primitives.html"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:1:<autosummary>:1
msgid ":obj:`mod <tvm.tir.Schedule.mod>`\\"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1
msgid "Returns the AST of the module being scheduled"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:1:<autosummary>:1
msgid ":obj:`state <tvm.tir.Schedule.state>`\\"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.state:1
msgid "Returns the ScheduleState in the current schedule class"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:1:<autosummary>:1
msgid ":obj:`trace <tvm.tir.Schedule.trace>`\\"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.trace:1
msgid ""
"Returns the internally maintained trace of scheduling program execution"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`copy <tvm.tir.Schedule.copy>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.copy:1
msgid ""
"Returns a copy of the schedule, including both the state and the symbol "
"table, * guaranteeing that * 1) SRef tree is completely reconstructed; * 2) "
"The IRModule being scheduled is untouched; * 3) All the random variables are"
" valid in the copy, pointing to the corresponding sref * reconstructed"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`seed <tvm.tir.Schedule.seed>`\\ \\(seed\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.seed:1
msgid "Seed the randomness"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`fork_seed <tvm.tir.Schedule.fork_seed>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fork_seed:1
msgid "Returns a forked random state as seed for new schedules"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`show <tvm.tir.Schedule.show>`\\ \\(rand\\_var\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.show:1
msgid ""
"Returns a string representation of the value that the random variable "
"evaluates to"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`get <tvm.tir.Schedule.get>`\\ \\(rand\\_var\\_or\\_sref\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get:1
msgid ""
"Returns: - the corresponding Block that a BlockRV evaluates to; - the "
"corresponding For that a LoopRV evaluates to; - the corresponding integer "
"that a ExprRV evaluates to; - the corresponding Block that a block sref "
"points to; - the corresponding For that a loop sref points to;"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`get_sref <tvm.tir.Schedule.get_sref>`\\ \\(rand\\_var\\_or\\_stmt\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_sref:1
msgid ""
"Returns the corresponding sref to the given 1) LoopRV 2) BlockRV 3) Block 4)"
" For"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`remove_rv <tvm.tir.Schedule.remove_rv>`\\ \\(rand\\_var\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.remove_rv:1
msgid "Remove a random variable from the symbol table"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ""
":obj:`sample_categorical <tvm.tir.Schedule.sample_categorical>`\\ "
"\\(candidates\\, probs\\[\\, decision\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.sample_categorical:1
msgid "Sample an integer given the probability distribution"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`get_block <tvm.tir.Schedule.get_block>`\\ \\(name\\[\\, func\\_name\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_block:1
msgid "Retrieve a block in a specific function with its name"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`get_loops <tvm.tir.Schedule.get_loops>`\\ \\(block\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_loops:1
msgid "Get the parent loops of the block in its scope, from outer to inner"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`fuse <tvm.tir.Schedule.fuse>`\\ \\(\\*loops\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Fuse a list of consecutive loops into one."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`split <tvm.tir.Schedule.split>`\\ \\(loop\\, factors\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Split a loop into a list of consecutive loops."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`reorder <tvm.tir.Schedule.reorder>`\\ \\(\\*ordered\\_loops\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Reorder a list of loops."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`parallel <tvm.tir.Schedule.parallel>`\\ \\(loop\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Parallelize the input loop."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`vectorize <tvm.tir.Schedule.vectorize>`\\ \\(loop\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Vectorize the input loop."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`bind <tvm.tir.Schedule.bind>`\\ \\(loop\\, thread\\_axis\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Bind the input loop to the given thread axis."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`unroll <tvm.tir.Schedule.unroll>`\\ \\(loop\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Unroll the input loop."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ""
":obj:`cache_read <tvm.tir.Schedule.cache_read>`\\ \\(block\\, "
"read\\_buffer\\_index\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Create a block that reads a buffer region into a read cache."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ""
":obj:`cache_write <tvm.tir.Schedule.cache_write>`\\ \\(block\\, "
"write\\_buffer\\_index\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Create a block that reads a buffer region into a write cache."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ""
":obj:`compute_at <tvm.tir.Schedule.compute_at>`\\ \\(block\\, loop\\[\\, "
"preserve\\_unit\\_loops\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Compute-At."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ""
":obj:`reverse_compute_at <tvm.tir.Schedule.reverse_compute_at>`\\ "
"\\(block\\, loop\\[\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Reverse-Compute-At."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`compute_inline <tvm.tir.Schedule.compute_inline>`\\ \\(block\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Inline a block into its consumer(s)."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ""
":obj:`reverse_compute_inline <tvm.tir.Schedule.reverse_compute_inline>`\\ "
"\\(block\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid "Inline a block into its only producer."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`rfactor <tvm.tir.Schedule.rfactor>`\\ \\(loop\\, factor\\_axis\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:1
msgid "Factorize an associative reduction block by the specified loop."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ""
":obj:`storage_align <tvm.tir.Schedule.storage_align>`\\ \\(block\\, "
"buffer\\_index\\, axis\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ""
"Set alignment requirement for specific dimension such that stride[axis] == k"
" * factor + offset for some k."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
msgid ":obj:`enter_postproc <tvm.tir.Schedule.enter_postproc>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.Schedule.mod:1:<autosummary>:1
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.enter_postproc:1
msgid "A no-op that marks the start of postprocessing phase of scheduling"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.copy:8
msgid "**copy** -- A new copy of the schedule"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.seed:3
msgid "The new random seed, -1 if use device random, otherwise non-negative"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fork_seed:3
msgid ""
"**seed** -- The forked random state, not the same as the current random "
"state"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.show:3
msgid "The random variable to be evaluated"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.show:6
msgid "**str_repr** -- The string representation"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get:8
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_sref:7
msgid "The random variable / sref to be evaluated"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get:11
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_sref:10
msgid "**result** -- The corresponding result"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.remove_rv:3
msgid "The random variable to be removed"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.sample_categorical:3
msgid "The candidates to be sampled from"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.sample_categorical:5
msgid "The probability of each candidate"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.sample_categorical:7
msgid "The sampling decision, if any"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.sample_categorical:10
msgid "**result** -- The random variable sampled from candidates"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_block:3
msgid "The name of the block"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_block:5
msgid "The name of the function"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_block:8
msgid ""
"**block** -- The block retrieved IndexError is raised if 0 or multiple "
"blocks exist with the specific name."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_loops:3
msgid "The query block"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.get_loops:6
msgid ""
"**loops** -- A list of loops above the given block in its scope, from outer "
"to inner"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fuse:1
msgid ""
"Fuse a list of consecutive loops into one. It requires: 1) The loops can't "
"have annotations or thread bindings. 2) The (i+1)-th loop must be the only "
"child of the i-th loop. 3) All loops must start with 0."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fuse:6
msgid "The loops to be fused"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fuse:9
msgid "**fused_loop** -- The new loop after fusion"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fuse:14
msgid "Before applying fuse, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fuse:26
msgid "Create the schedule and do fuse:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.fuse:35
msgid "After applying fuse, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:1
msgid ""
"Split a loop into a list of consecutive loops. It requires: 1) The loop "
"can't have annotation or thread binding. 2) The loop must start with 0. "
"Predicates may be added to ensure the total loop numbers keeps unchanged. In"
" `factors`, at most one of the factors can be None, which will be "
"automatically inferred."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:8
msgid "The loop to be split"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:10
msgid ""
"The splitting factors Potential inputs are: - None - ExprRV - Nonnegative "
"constant integers"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:17
msgid "**split_loops** -- The new loops after split"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:22
msgid "Before split, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:34
msgid "Create the schedule and do split:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.split:43
msgid "After applying split, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reorder:1
msgid ""
"Reorder a list of loops. It doesn't require the loops to be consecutive. It "
"requires: 1) The loops are in the same chain. That means: the loops can be "
"ordered to [l_1, l_2, ... , l_n] where l_i is an ancestor of l_{i+1} and "
"there are only single-branch loops between l_1 and l_n (which also indicates"
" they are under the same scope). 2) After reordering, the domain of an outer"
" loop cannot depend on any of the inner loops. 3) For every block under the "
"loop nests, its block binding must be affine, and the block variables must "
"be either data parallel or reduction. 4) No duplicated loops are allowed in "
"the arguments."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reorder:11
msgid "The loops in the new order"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reorder:16
msgid "Before reorder, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reorder:28
msgid "Create the schedule and do reorder:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reorder:37
msgid "After applying reorder, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.parallel:1
msgid ""
"Parallelize the input loop. It requires: 1) The scope block that the loop is"
" in should have stage-pipeline property 2) All the blocks under the loop are"
" complete blocks or reduction blocks, and have affine bindings 3) For each "
"block under the loop, the loop can only be contained in data-parallel block "
"iters' bindings"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.parallel:8
msgid "The loop to be parallelized"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.parallel:13
msgid "Before parallel, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.parallel:27
msgid "Create the schedule and do parallel:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.parallel:35
msgid "After applying parallel, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.vectorize:1
msgid ""
"Vectorize the input loop. It requires: 1) The scope block that the loop is "
"in should have stage-pipeline property 2) All the blocks under the loop are "
"complete blocks or reduction blocks, and have affine bindings 3) For each "
"block under the loop, the loop can only be contained in data-parallel block "
"iters' bindings"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.vectorize:8
msgid "The loop to be vectorized"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.vectorize:13
msgid "Before vectorize, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.vectorize:27
msgid "Create the schedule and do vectorize:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.vectorize:35
msgid "After applying vectorize, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.bind:1
msgid ""
"Bind the input loop to the given thread axis. It requires: 1) The scope "
"block that the loop is in should have stage-pipeline property 2) All the "
"blocks under the loop are complete blocks or reduction blocks, and have "
"affine bindings 3) For each block under the loop, if the thread axis starts "
"with \"threadIdx`, the loop can only be contained in data-parallel block "
"iter and reduction block iters' bindings. Otherwise the loop can only be "
"contained in data-parallel block iters' bindings"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.bind:9
msgid "The loop to be bound to the thread axis"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.bind:11
msgid ""
"The thread axis to be bound to the loop. Possible candidates: - "
"blockIdx.x/y/z - threadIdx.x/y/z - vthread.x/y/z - vthread (It is a legacy "
"behavior that will be deprecated. Please use `vthread.x/y/z` instead.)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.bind:21
msgid "Before bind, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.bind:35
msgid "Create the schedule and do bind:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.bind:44
msgid "After applying bind, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.unroll:1
msgid "Unroll the input loop. It requires nothing"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.unroll:3
msgid "The loop to be unrolled"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.unroll:8
msgid "Before unroll, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.unroll:22
msgid "Create the schedule and do unroll:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.unroll:30
msgid "After applying unroll, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:1
msgid ""
"Create a block that reads a buffer region into a read cache. It requires:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:3
msgid "There is at most one block who write the buffer in the scope."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:5
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:5
msgid "The scope block have stage-pipeline property."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:7
msgid "The consumer block of the target buffer."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:9
msgid "The index of the buffer in block's read region."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:11
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:11
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.ThreadSync:3
msgid "The target storage scope."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:14
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:14
msgid "**cached_block** -- The block of the cache stage"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:19
msgid "Before cache_read, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:31
msgid "Create the schedule and cache_read:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_read:40
msgid "After applying cache_read, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:1
msgid ""
"Create a block that reads a buffer region into a write cache. It requires:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:3
msgid "There is only one block who write the buffer in the scope."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:7
msgid "The producer block of the target buffer."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:9
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:8
msgid "The index of the buffer in block's write region."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:19
msgid "Before cache_write, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:31
msgid "Create the schedule and cache_write:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.cache_write:40
msgid "After applying cache_write, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:1
msgid ""
"Compute-At. Move a producer block under the specific loop, and regenerate "
"the loops induced by the block so that the buffer region produced by the "
"producer block could cover those regions consumed by its consumer blocks "
"under the given loop. It requires:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:5
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:5
msgid ""
"`block` and `loop` are under the same scope, `loop` is not the ancestor of "
"`block`"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:7
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:7
msgid "The scope block has stage-pipeline property"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:9
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:9
msgid ""
"3) The subtree of the scope block, where the given block is in, satisfies "
"the compact dataflow condition. i.e. all the blocks in the scope block's "
"subtree must be either complete block or reduction block"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:13
msgid ""
"4) The block is not an output block with regard to the scope block, i.e. the"
" buffers written by the block are allocated under the scope block"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:16
msgid "All the consumers of the block are under the given loop"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:18
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:15
msgid "The block to be moved"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:20
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:17
msgid "The loop where the block to be moved under"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:22
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:19
msgid "Whether to keep the trivial loops whose extents are 1"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:27
msgid "Before compute-at, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:41
msgid "Create the schedule and do compute-at:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_at:51
msgid "After applying compute-at, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:1
msgid ""
"Reverse-Compute-At. Move a consumer block under the specific loop, and "
"regenerate the loops induced by the block so that the buffer region consumed"
" by the consumer block could cover those regions produced by its producer "
"blocks under the given loop. It requires:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:13
msgid "All the producers of the block are under the given loop"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:24
msgid "Before reverse-compute-at, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:38
msgid "Create the schedule and do reverse-compute-at:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_at:48
msgid "After applying reverse-compute-at, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_inline:1
msgid "Inline a block into its consumer(s). It requires:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_inline:3
msgid "The block is a complete non-root block, which only produces one buffer"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_inline:5
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:5
msgid "The block must not be the only leaf in the scope."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_inline:7
msgid ""
"The body of the block must be a BufferStore statement in the form of, ``A[i,"
" j, k, ...] = ...`` where the indices of the LHS are all distinct atomic "
"variables, and no variables other than those indexing variables are allowed "
"in the statement."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_inline:13
msgid "The block to be inlined to its consumer(s)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_inline:18
msgid "Before compute-inline, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_inline:32
msgid "Create the schedule and do compute-inline:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.compute_inline:40
msgid "After applying compute-inline, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:1
msgid "Inline a block into its only producer. It requires:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:3
msgid ""
"The block is a complete non-root block, which only produces and consumes one"
" buffer"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:7
msgid ""
"The only producer of the block is a read-after-write producer and a complete"
" non-root block"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:10
msgid ""
"The body of the block must be a BufferStore statement in the form of, "
"``B[f(i, j, k, ...)] = g(i, j, k, A[i, j, k, ...] ...)`` where the indices "
"of each `BufferLoad` on the RHS are all distinct atomic variables, and no "
"variables other than those indexing variables are allowed in the statement."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:16
msgid "The block to be inlined to its producer"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:21
msgid "Before reverse-compute-inline, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:35
msgid "Create the schedule and do reverse-compute-inline:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.reverse_compute_inline:43
msgid "After applying reverse-compute-inline, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:3
msgid ""
"An associative reduction cannot be parallelized directly, because it leads "
"to potential race condition during accumulation. Alternatively, the "
"reduction could be factorized on a loop with the following steps: - Step 1: "
"evenly slice the reduction into `n` separate chunks, where `n` is the loop "
"extent - Step 2: compute the chunks separately and write the result into `n`"
" intermediate buffers; - Step 3: accumulate the `n` separate buffer into the"
" result buffer. Note that the Step 2 above introduces opportunities for "
"parallelization."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:11
msgid ""
"RFactor is a schedule primitive that implements the transformation described"
" above: Given a block that writes to buffer `B`, it factorizes a loop of "
"extent `n`."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:14
msgid ""
"For example, the pseudocode below accumulates `B[i] = sum(A[i, : , : ])`:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:23
msgid ""
"Suppose RFactor is applied on the innermost loop `k` and `factor_axis = 1`. "
"RFactor then creates an intermediate buffer and two blocks."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:26
msgid ""
"1. The intermediate buffer, or \"rf-buffer\" is a buffer of rank `ndim(B) + "
"1` and size `size(B) * n`, whose shape expands from `shape(B)` by adding an "
"axis of `n` at the position specified by `factor_axis`. For example,"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:30
msgid "shape(B) = [1, 2, 3], factor_axis = 0  => shape(B_rf) = [n, 1, 2, 3]"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:31
msgid "shape(B) = [1, 2, 3], factor_axis = 1  => shape(B_rf) = [1, n, 2, 3]"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:32
msgid "shape(B) = [1, 2, 3], factor_axis = 2  => shape(B_rf) = [1, 2, n, 3]"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:33
msgid "shape(B) = [1, 2, 3], factor_axis = 3  => shape(B_rf) = [1, 2, 3, n]"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:35
msgid ""
"2. The rfactor block, or \"rf-block\", is a block that writes to the `rf-"
"buffer` without accumulating over the loop `k`, i.e. the loop `k` is "
"converted from a reduction loop to a data parallel loop. In our example, the"
" rf-block is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:48
msgid ""
"3. The write-back block, or `wb-block`, is a block that accumulates the rf-"
"buffer into the result buffer. All the reduction loops are removed except "
"the loop `k` for accumulation. In our example, the wb-block is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:60
msgid "The loop outside block for which we want to do rfactor"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:62
msgid ""
"The position where the new dimension is placed in the new introduced rfactor"
" buffer"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:65
msgid ""
"**rf_block** -- The block which computes partial results over each slices "
"(i.e., the first block as described in the above illustration)"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:71
msgid "Before rfactor, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:85
msgid "Create the schedule and do rfactor:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:94
#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:41
msgid "After applying rfactor, the IR becomes:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.rfactor:114
msgid ""
"Rfactor requires: 1) `loop` has only one child block, and it is a reduction "
"block; 2) `loop` is a reduction loop, i.e. the loop variable is bound to "
"only reduction variables in the block binding; 3) `loop` is not "
"parallelized, vectorized, unrolled or bound to any thread axis; 4) The block"
" scope that `loop` is in is a staged-pipeline; 5) The outermost loop outside"
" the reduction block should has the reduction block as its first child "
"block; 6) The outermost reduction loop should have only one child block; 7) "
"An unary extent loop that is not bound to any reduction or data parallel "
"variables in the block binding should not appear under some reduction loop; "
"8) The reduction block should write to only one buffer, and its init and "
"body are both simple `BufferStore`s, and the pattern is registered as an "
"associative reducer. The pre-defined patterns include: plus, multiplication,"
" min and max; 9) Each of the loops on top of the block cannot be bound to a "
"data parallel and a reduction block binding at the same time; 10) "
"`factor_axis` should be in range `[-ndim(B) - 1, ndim(B)]`, where `B` is the"
" buffer that the reduction block writes to. Negative indexing is normalized "
"according to numpy convention."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:1
msgid ""
"Set alignment requirement for specific dimension such that stride[axis] == k"
" * factor + offset for some k. This is useful to set memory layout for more "
"friendly memory access pattern. For example, we can set alignment to be "
"factor=2, offset=1 to avoid bank conflict for thread access on higher "
"dimension in GPU shared memory."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:6
msgid "The producer block of the buffer."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:10
msgid "The dimension to be specified for alignment."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:12
msgid "The factor multiple of alignment."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:14
msgid "The required offset factor."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:19
msgid "Before storage_align, in TensorIR, the IR is:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:33
msgid "Create the schedule and do storage_align:"
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:56
msgid "After lowering passes, buffer B will have strides as [129, 1]."
msgstr ""

#: ../../../python/tvm/tir/schedule/schedule.pydocstring of
#: tvm.tir.schedule.schedule.Schedule.storage_align:58
msgid ""
"Storage_align requires the buffer to be an intermediate buffer defined via "
"`alloc_buffer`."
msgstr ""

#: ../../_staging/api/python/tir.rst:28
msgid "tvm.tir.transform"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1
msgid "Namespace of all TIR transformations"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`prim_func_pass <tvm.tir.transform.prim_func_pass>`\\ "
"\\(\\[pass\\_func\\, opt\\_level\\, name\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:1
msgid "Decorate a function pass."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`Apply <tvm.tir.transform.Apply>`\\ \\(ftransform\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Apply:1
msgid "Apply ftransform to each function in the Module."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`BF16CastElimination <tvm.tir.transform.BF16CastElimination>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
"Eliminate verbose casting between fp32 and bf16 Checks if the AST has the "
"pattern: castto32(castto16(some_fp32_op(...))) The verbose casting is "
"generated by BF16Promote for multiple bf16 Ops in a row."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`BF16Legalize <tvm.tir.transform.BF16Legalize>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid "Legalize bf16 typed Ops."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`BF16Promote <tvm.tir.transform.BF16Promote>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid "Promote bf16 to fp32."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`BF16TypeLowering <tvm.tir.transform.BF16TypeLowering>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid "Replace all bf16 type with uint16."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`CoProcSync <tvm.tir.transform.CoProcSync>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CoProcSync:1
msgid "Detect and insert sync points to co-processor."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`CombineContextCall <tvm.tir.transform.CombineContextCall>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CombineContextCall:1
msgid "Combine context calls in the host function."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`CompactBufferAllocation <tvm.tir.transform.CompactBufferAllocation>`\\"
" \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid "Compact the buffer access region."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`ConvertBlocksToOpaque <tvm.tir.transform.ConvertBlocksToOpaque>`\\ "
"\\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.ConvertBlocksToOpaque:1
msgid ""
"Substitute all the block vars with the PrimExprs they are bound to, "
"indicated by the corresponding iter_values in BlockRealize, and then convert"
" the blocks into opaque ones by removing all the iter_values in BlockRealize"
" and iter_vars in Block."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`DecorateDeviceScope <tvm.tir.transform.DecorateDeviceScope>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.DecorateDeviceScope:1
msgid "Decorate all the function's body as device function."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`Filter <tvm.tir.transform.Filter>`\\ \\(fcond\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Filter:1
msgid "Filter functions by the calling convention attribute."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`FlattenBuffer <tvm.tir.transform.FlattenBuffer>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
"Flatten the multi-dimensional BufferLoad and BufferStore to single "
"dimensional Load/Store."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`HoistIfThenElse <tvm.tir.transform.HoistIfThenElse>`\\ \\(\\[variant\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.HoistIfThenElse:1
msgid "Hoist loop-invariant IfThenElse nodes to outside the eligible loops."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`InferFragment <tvm.tir.transform.InferFragment>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InferFragment:1
msgid "Infer the TensorCore fragment infomation using tensor intrinsics."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`InjectCopyIntrin <tvm.tir.transform.InjectCopyIntrin>`\\ "
"\\(pragma\\_key\\, fintrin\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectCopyIntrin:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectVirtualThread:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LoopPartition:1
msgid "Inject virtual thread loops."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`InjectDoubleBuffer <tvm.tir.transform.InjectDoubleBuffer>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectDoubleBuffer:1
msgid "Inject double buffer statements."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`InjectPrefetch <tvm.tir.transform.InjectPrefetch>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectPrefetch:1
msgid "Inject prefetch instructions into stmt."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`InjectVirtualThread <tvm.tir.transform.InjectVirtualThread>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`InstrumentBoundCheckers <tvm.tir.transform.InstrumentBoundCheckers>`\\"
" \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InstrumentBoundCheckers:1
msgid "Instruments bound checkers."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`LegalizePackedCalls <tvm.tir.transform.LegalizePackedCalls>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LegalizePackedCalls:1
msgid "Legalize packed calls to have its arguments wrapped in TVMValues"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`LiftAttrScope <tvm.tir.transform.LiftAttrScope>`\\ \\(attr\\_key\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LiftAttrScope:1
msgid "Lift common attrs with attr_key to outer scope."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`LoopPartition <tvm.tir.transform.LoopPartition>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`LowerCustomDatatypes <tvm.tir.transform.LowerCustomDatatypes>`\\ "
"\\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerCustomDatatypes:1
msgid "Lower custom datatypes."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`LowerDeviceStorageAccessInfo "
"<tvm.tir.transform.LowerDeviceStorageAccessInfo>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerDeviceStorageAccessInfo:1
msgid "Lower attached storage access information on device."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`LowerInitBlock <tvm.tir.transform.LowerInitBlock>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerInitBlock:1
msgid "Lower block init stmt into IfThenElse statements."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`LowerIntrin <tvm.tir.transform.LowerIntrin>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerIntrin:1
msgid "Lower target specific intrinsic calls."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`LowerMatchBuffer <tvm.tir.transform.LowerMatchBuffer>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid "Remove match buffers inside the block."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`LowerTVMBuiltin <tvm.tir.transform.LowerTVMBuiltin>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerTVMBuiltin:1
msgid "Lower tvm builtin intrinsics."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`LowerThreadAllreduce <tvm.tir.transform.LowerThreadAllreduce>`\\ "
"\\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerThreadAllreduce:1
msgid "Lower cross thread alleduce."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`LowerWarpMemory <tvm.tir.transform.LowerWarpMemory>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerWarpMemory:1
msgid "Lower warp memory access to low-level device related function calls."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`MakePackedAPI <tvm.tir.transform.MakePackedAPI>`\\ "
"\\(\\[num\\_unpacked\\_params\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MakePackedAPI:1
msgid "Transform the PrimFuncs in the module to a packed func API."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`MakeUnpackedAPI <tvm.tir.transform.MakeUnpackedAPI>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MakeUnpackedAPI:1
msgid ""
"Transform the PrimFuncs in the module to a C API compatible with internal "
"calls."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`MergeDynamicSharedMemoryAllocations "
"<tvm.tir.transform.MergeDynamicSharedMemoryAllocations>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MergeDynamicSharedMemoryAllocations:1
msgid ""
"This pass merges multiple TIR-level dynamic shared memory allocations into "
"one allocation."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`NarrowDataType <tvm.tir.transform.NarrowDataType>`\\ \\(target\\_bits\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.NarrowDataType:1
msgid "Narrow down PrimExpr datatype in stmt to target_bits."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`PlanAndUpdateBufferAllocationLocation "
"<tvm.tir.transform.PlanAndUpdateBufferAllocationLocation>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
"Locate the buffer allocation to the exact position (usually is the lca of "
"buffer access)."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`RemoveNoOp <tvm.tir.transform.RemoveNoOp>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.RemoveNoOp:1
msgid "Remove No Op from the Stmt."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`RewriteUnsafeSelect <tvm.tir.transform.RewriteUnsafeSelect>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.RewriteUnsafeSelect:1
msgid "Detect and rewrite unsafe select that contains memory access."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`Simplify <tvm.tir.transform.Simplify>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Simplify:1
msgid "Run arithmetic simplifications on the statements and expressions."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`SkipAssert <tvm.tir.transform.SkipAssert>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.SkipAssert:1
msgid "Skip assert stmt."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`SplitHostDevice <tvm.tir.transform.SplitHostDevice>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.SplitHostDevice:1
msgid "Split the function into a host function and device functions."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`StorageFlatten <tvm.tir.transform.StorageFlatten>`\\ "
"\\(cache\\_line\\_size\\[\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageFlatten:1
msgid "Flatten the multi-dimensional read/write to 1D."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`StorageRewrite <tvm.tir.transform.StorageRewrite>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageRewrite:1
msgid "Rewrite storage allocation pattern."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`TextureFlatten <tvm.tir.transform.TextureFlatten>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.TextureFlatten:1
msgid "Flatten the multi-dimensional read/write to 2D."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`ThreadSync <tvm.tir.transform.ThreadSync>`\\ \\(storage\\_scope\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.ThreadSync:1
msgid "Insert sync between parallel read/write of shared buffers."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`UnifyThreadBinding <tvm.tir.transform.UnifyThreadBinding>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
"Unify all the thread bindings for \"blockIdx.x/y/z\", \"threadIdx.x/y/z\", "
"and \"vthread.x/y/z\"."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`UnrollLoop <tvm.tir.transform.UnrollLoop>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.UnrollLoop:1
msgid "Unroll the constant loop marked by unroll."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ""
":obj:`VectorizeLoop <tvm.tir.transform.VectorizeLoop>`\\ "
"\\(\\[enable\\_vectorize\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.VectorizeLoop:1
msgid "Lower vectorization loops."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
msgid ":obj:`VerifyMemory <tvm.tir.transform.VerifyMemory>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform:1:<autosummary>:1
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.VerifyMemory:1
#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_memory:1
msgid "Verify if func contains illegal host side direct memory access."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:1:<autosummary>:1
msgid ":obj:`PrimFuncPass <tvm.tir.transform.PrimFuncPass>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:1:<autosummary>:1
msgid "A pass that works on each :py:func:`tvm.tir.PrimFunc` in a module."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:3
msgid ""
"This function returns a callback when pass_func is provided. Otherwise, it "
"returns the created function pass using the given optimization function."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:7
msgid "The transformation function or class."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:9
msgid "The optimization level of this module pass."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:11
msgid ""
"The name of the function pass. The name could be empty. In this case, the "
"name of the optimization function will be used as the pass name."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:14
msgid "The list of passes that the function pass is dependent on."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:17
msgid ""
"**create_function_pass** -- A decorator will be returned if pass_func is not"
" provided, otherwise return the decorated result. The returned decorator has"
" two behaviors depending on the input: A new FunctionPass will be returned "
"when we decorate a pass function. A new FunctionPass class will be returned "
"when we decorate a class type."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:26
msgid "The following code block decorates a function pass class."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.function_pass.prim_func_pass:40
msgid ""
"The following code creates a function pass by decorating a user defined "
"transform function."
msgstr ""

#: ../../../python/tvm/tir/transform/function_pass.pydocstring of
#: tvm.tir.transform.function_pass.PrimFuncPass:1
msgid ""
"A pass that works on each :py:func:`tvm.tir.PrimFunc` in a module. A "
"function pass class should be created through "
"py:func:`tvm.tir.transform.function_pass`."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Apply:3
msgid ""
"This function is a thin wrapper around tvm.tir.transform.prim_func_pass"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Apply:5
msgid "The transformation pass."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Apply:8
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16CastElimination:11
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16Legalize:4
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16Promote:4
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16TypeLowering:4
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CoProcSync:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CombineContextCall:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CompactBufferAllocation:35
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.ConvertBlocksToOpaque:5
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.DecorateDeviceScope:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Filter:6
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.FlattenBuffer:5
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.HoistIfThenElse:16
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InferFragment:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectCopyIntrin:8
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectDoubleBuffer:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectPrefetch:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectVirtualThread:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InstrumentBoundCheckers:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LegalizePackedCalls:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LiftAttrScope:6
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LoopPartition:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerCustomDatatypes:5
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerDeviceStorageAccessInfo:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerInitBlock:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerIntrin:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerMatchBuffer:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerTVMBuiltin:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerThreadAllreduce:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerWarpMemory:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MakePackedAPI:8
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MakeUnpackedAPI:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MergeDynamicSharedMemoryAllocations:4
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.NarrowDataType:6
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.PlanAndUpdateBufferAllocationLocation:5
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.RemoveNoOp:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.RewriteUnsafeSelect:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Simplify:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.SkipAssert:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.SplitHostDevice:3
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageFlatten:8
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageRewrite:7
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.TextureFlatten:5
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.ThreadSync:6
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.UnifyThreadBinding:8
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.UnrollLoop:5
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.VectorizeLoop:7
#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.VerifyMemory:3
msgid "**fpass** -- The result pass"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16CastElimination:1
msgid ""
"Eliminate verbose casting between fp32 and bf16 Checks if the AST has the "
"pattern: castto32(castto16(some_fp32_op(...))) The verbose casting is "
"generated by BF16Promote for multiple bf16 Ops in a row. e.g.: X[i] + Y[i] +"
" T[i] => bf16((float32(bf16((float32(X[i]) + float32(Y[i])))) + "
"float32(T[i]))) After this pass: bf16(float32(X[i]) + float32(Y[i]) + "
"float32(T[i]))"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16Legalize:1
msgid ""
"Legalize bf16 typed Ops. Runs BF16Promote, BF16CastElimination and "
"BF16TypeLowering"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16Promote:1
msgid ""
"Promote bf16 to fp32. Add a cast to fp32 before Ops, then add a cast back to"
" bf16."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.BF16TypeLowering:1
msgid ""
"Replace all bf16 type with uint16. Also lower the casting between fp32 and "
"bf16"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CompactBufferAllocation:1
msgid ""
"Compact the buffer access region. by removing the buffer regions that are "
"not accessed, i.e. narrowing the buffer shape and adjust the access region "
"if necessary."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CompactBufferAllocation:7
msgid ""
"Before narrowing, ``B`` is a ``[16, 16]`` buffer, but only a skinny vector "
"``B[i, 0:16]`` is accessed."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.CompactBufferAllocation:20
msgid ""
"This pass narrows the buffer shape and adjust its accessed region "
"accordingly.  In this particular case, because only a ``1 * 16`` vector of "
"``B`` is accessed, the pass narrows ``B`` to shape ``[1, 16]``, and changes "
"the access to ``B[i, j]`` to ``B[0, j]``."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.Filter:3
msgid "The condition of the filtering."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.FlattenBuffer:1
msgid ""
"Flatten the multi-dimensional BufferLoad and BufferStore to single "
"dimensional Load/Store. Also remove Block to ensure that the flattened TIR "
"can not be scheduled again."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.HoistIfThenElse:3
msgid ""
"The variant of the pass. variant can have any one of following values "
"[\"basic\", None(Default)].  The basic variant supports basic hoisting "
"scenarios where it expects the For & If Nodes are in place consecutively and"
" does not involve global scope variables or more advanced scenarios.  "
"Default variant supports all hoisting scenarios,i.e., {\"Basic\" + "
"\"Advanced\"} supported with control with PassContext configs like below:"
"      config={\"tir.HoistIfThenElse\": {\"support_block_scope_hosting\": "
"True}}"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.HoistIfThenElse:3
msgid ""
"The variant of the pass. variant can have any one of following values "
"[\"basic\", None(Default)]."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.HoistIfThenElse:6
msgid ""
"The basic variant supports basic hoisting scenarios where it expects the For"
" & If Nodes are in place consecutively and does not involve global scope "
"variables or more advanced scenarios."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.HoistIfThenElse:10
msgid ""
"Default variant supports all hoisting scenarios,i.e., {\"Basic\" + "
"\"Advanced\"} supported with control with PassContext configs like below:"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.HoistIfThenElse:13
msgid "config={\"tir.HoistIfThenElse\": {\"support_block_scope_hosting\": True}}"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectCopyIntrin:3
msgid "The pragma key for hint of copy."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.InjectCopyIntrin:5
msgid ""
"The function with signature copyintrin(src, dst, pad_before, pad_after, "
"pad_value)"
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LiftAttrScope:3
msgid "The attribute key to be checked."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerCustomDatatypes:3
msgid ""
"See tvm::datatypes::Registry for more information on adding custom "
"datatypes."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerDeviceStorageAccessInfo:6
msgid "Run this pass after all storage access analysis finish."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.LowerMatchBuffer:1
msgid ""
"Remove match buffers inside the block. Also, it will validate the binding."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.MakePackedAPI:3
msgid ""
"Number of parameters that we hope to directly pass via normal arguments "
"following the PackedFunc input signature. If it is specified as -1 or it is "
"less than the number of arguments, the pass will packed arguments still."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.NarrowDataType:3
msgid "The target bit configuration."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.NarrowDataType:9
msgid "Run this pass after StorageFlatten."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.PlanAndUpdateBufferAllocationLocation:1
msgid ""
"Locate the buffer allocation to the exact position (usually is the lca of "
"buffer access). This pass will inject opaque block with alloc_buffers at the"
" allocation site."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageFlatten:4
msgid "The size of CPU cache line."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageFlatten:6
msgid "Whether to create bound attributes."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.StorageRewrite:3
msgid ""
"Moves the allocation to outer most possible scope. Trying to share space "
"between allocations to make a static allocation plan when possible."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.UnifyThreadBinding:1
msgid ""
"Unify all the thread bindings for \"blockIdx.x/y/z\", \"threadIdx.x/y/z\", "
"and \"vthread.x/y/z\". Before the unification, two vars that are bound to a "
"thread axis (e.g., \"threadIdx.x\") use different IterVars and variables in "
"their AttrStmts. After the unification, we use a consolidated IterVar and a "
"variable for them."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.UnifyThreadBinding:13
msgid ""
"`vthread` is a legacy behavior that will be deprecated, though thread "
"bindings of `vthread` are still also unified in this pass. Please use "
"`vthread.x`, `vthread.y` and `vthread.z` instead."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.UnrollLoop:3
msgid ""
"This pass also automatically attach pragma unroll tag to loops which meets "
"the standard."
msgstr ""

#: ../../../python/tvm/tir/transform/__init__.pydocstring of
#: tvm.tir.transform.transform.VectorizeLoop:3
msgid ""
"Whether vectorization is enabled. Will lower to scalar loop when it is "
"turned off."
msgstr ""

#: ../../_staging/api/python/tir.rst:36
msgid "tvm.tir.analysis"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of tvm.tir.analysis:1
msgid "Namespace of all TIR analysis utils."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
msgid ""
":obj:`Block <tvm.tir.analysis.Block>`\\ \\(iter\\_vars\\, reads\\, writes\\,"
" name\\_hint\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
msgid ":obj:`Buffer <tvm.tir.analysis.Buffer>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
msgid ":obj:`BufferRegion <tvm.tir.analysis.BufferRegion>`\\ \\(buffer\\, region\\)"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
msgid ":obj:`Dict <tvm.tir.analysis.Dict>`\\ \\(\\*args\\, \\*\\*kwds\\)"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
msgid ":obj:`List <tvm.tir.analysis.List>`\\ \\(\\*args\\, \\*\\*kwds\\)"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
msgid ":obj:`PrimExpr <tvm.tir.analysis.PrimExpr>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1 ../../../python/tvm/ir/expr.pydocstring
#: of tvm.ir.expr.PrimExpr:1
msgid "Base class of all primitive expressions."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
msgid ""
":obj:`PrimFunc <tvm.tir.analysis.PrimFunc>`\\ \\(params\\, body\\[\\, "
"ret\\_type\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
msgid ":obj:`Stmt <tvm.tir.analysis.Stmt>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis:1:<autosummary>:1
msgid ""
":obj:`Var <tvm.tir.analysis.Var>`\\ \\(name\\, dtype\\, "
"tvm.ir.type.Type\\]\\, span\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
msgid ""
":obj:`calculate_workspace_bytes "
"<tvm.tir.analysis.calculate_workspace_bytes>`\\ \\(func\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:1
msgid ""
"Calculate the workspace size in bytes needed by the TIR allocates inside the"
" TIR PrimFunc."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
msgid ""
":obj:`detect_buffer_access_lca "
"<tvm.tir.analysis.detect_buffer_access_lca>`\\ \\(func\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
msgid ""
"Detect the lowest common ancestor(LCA) of buffer access, including both "
"high-level access(BufferLoad, BufferStore) and low-level access(Load, Store "
"and opaque access)."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
msgid ":obj:`expr_deep_equal <tvm.tir.analysis.expr_deep_equal>`\\ \\(lhs\\, rhs\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:1
msgid "Deeply compare two nested expressions."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
msgid ""
":obj:`get_block_access_region <tvm.tir.analysis.get_block_access_region>`\\ "
"\\(block\\, buffer\\_var\\_map\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:2
msgid "Detect which regions of tensors in this block are read or written to."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
msgid ""
":obj:`get_block_read_write_region "
"<tvm.tir.analysis.get_block_read_write_region>`\\ \\(block\\, ...\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_read_write_region:2
msgid "Auto detect the block read/write region according to its body stmt."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
msgid ""
":obj:`verify_gpu_code <tvm.tir.analysis.verify_gpu_code>`\\ \\(func\\, "
"constraints\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_gpu_code:1
msgid "Verify if module contains illegal host side direct memory access."
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
msgid ":obj:`verify_memory <tvm.tir.analysis.verify_memory>`\\ \\(func\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
msgid ":obj:`verify_ssa <tvm.tir.analysis.verify_ssa>`\\ \\(func\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt.pydocstring of
#: tvm.tir.stmt.Block:1:<autosummary>:1
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_ssa:1
msgid "Verify if the func is in SSA form."
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
msgid ""
":obj:`access_ptr <tvm.tir.analysis.Buffer.access_ptr>`\\ "
"\\(access\\_mask\\[\\, ptr\\_type\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
msgid ":obj:`vload <tvm.tir.analysis.Buffer.vload>`\\ \\(begin\\[\\, dtype\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
msgid ":obj:`vstore <tvm.tir.analysis.Buffer.vstore>`\\ \\(begin\\, value\\)"
msgstr ""

#: ../../../python/tvm/tir/buffer.pydocstring of
#: tvm.tir.buffer.Buffer.access_ptr:1:<autosummary>:1
msgid ":obj:`scope <tvm.tir.analysis.Buffer.scope>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/ir/expr.pydocstring of tvm.ir.expr.PrimExpr:3
msgid ""
"PrimExpr is used in the low-level code optimizations and integer analysis."
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:1:<autosummary>:1
msgid ""
":obj:`with_body <tvm.tir.analysis.PrimFunc.with_body>`\\ \\(new\\_body\\[\\,"
" span\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/function.pydocstring of
#: tvm.tir.function.PrimFunc.with_body:1:<autosummary>:1
msgid ":obj:`specialize <tvm.tir.analysis.PrimFunc.specialize>`\\ \\(param\\_map\\)"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:4
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:5
msgid "The function to be detected."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:6
msgid "The byte alignment required for each tensor"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:9
msgid "**result** -- Workspace size in bytes."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:1
msgid ""
"Detect the lowest common ancestor(LCA) of buffer access, including both "
"high-level access(BufferLoad, BufferStore) and low-level access(Load, Store "
"and opaque access). The LCA may be a For loop or a Block."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:8
msgid "**result** -- Map from buffer to the LCA of all access to it."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:3
msgid "The left operand."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:5
msgid "The right operand."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:8
msgid "**result** -- The comparison result"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:13
msgid ""
"This function does not remap variable bindings, it will not return true for "
"(let x = 1 in x + 1) vs (let y = 1 in y + 1), unless x.same_as(y). Use "
"py:func:`tvm.ir.structural_equal` to handle structural variable remapping."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:17
msgid ""
"Due to the restriction of not remapping variables, this function can run "
"faster than StructuralEqual and can be used as a utility function during "
"arithmetic simplifications."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:21
msgid ""
"Always consider py:func:`tvm.ir.structural_equal` first, which handles the "
"structural remapping."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.expr_deep_equal:24
msgid ":obj:`tvm.ir.structural_equal`"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:2
msgid "Regions are sorted by order of appearance in the AST."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:4
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_read_write_region:4
msgid "The block in which we are detecting read/write regions."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:6
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_read_write_region:6
msgid ""
"The outside buffers which may access the block. Mapping from buffer var to "
"the buffer"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:9
msgid ""
"**result** --  Array of access regions. There are three arrays of "
"BufferRegion:     - first: read regions     - second: write regions     - "
"third: opaque regions"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:9
msgid "**result** --"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:13
msgid "Array of access regions. There are three arrays of BufferRegion:"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:12
msgid "first: read regions"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:13
msgid "second: write regions"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_access_region:14
msgid "third: opaque regions"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_read_write_region:2
msgid "An opaque access will be counted as both a read and a write access"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.get_block_read_write_region:9
msgid ""
"**result** -- An array only consisting of the read regions and write regions"
" of the input block"
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_gpu_code:3
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_memory:3
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_ssa:3
msgid "The module to be verified."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_gpu_code:5
msgid "The attribute constraints."
msgstr ""

#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_gpu_code:8
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_memory:6
#: ../../../python/tvm/tir/analysis/__init__.pydocstring of
#: tvm.tir.analysis.analysis.verify_ssa:6
msgid "**result** -- The result of verification."
msgstr ""

#: ../../_staging/api/python/tir.rst:45
msgid "tvm.tir.stmt_functor"
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of tvm.tir.stmt_functor:1
msgid "Statement functor utilities for IR transformations"
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:1:<autosummary>:1
msgid ""
":obj:`ir_transform <tvm.tir.stmt_functor.ir_transform>`\\ \\(stmt\\, "
"preorder\\, postorder\\[\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:1
msgid "Recursively visit and transform ir nodes in post DFS order."
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:1:<autosummary>:1
msgid ""
":obj:`post_order_visit <tvm.tir.stmt_functor.post_order_visit>`\\ \\(stmt\\,"
" fvisit\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.post_order_visit:2
msgid "Recursively visit the ir in post DFS order node, apply fvisit"
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:1:<autosummary>:1
msgid ":obj:`substitute <tvm.tir.stmt_functor.substitute>`\\ \\(node\\, vmap\\)"
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:1:<autosummary>:1
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.substitute:1
msgid "Substitute the var specified by vmap."
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:3
msgid "The input to be transformed."
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:5
msgid ""
"The function called in before recursive mutation If preorder returns None, "
"then the transform will proceed to recursive call. If preorder returns a not"
" None tvm.tir.Stmt/Expr, the transformer will simply return it and won't do "
"further recursion."
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:10
msgid "The function called after recursive mutation."
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:12
msgid "List of types that we only enable."
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.ir_transform:15
#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.substitute:8
msgid "**result** -- The result."
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.post_order_visit:2
msgid "Each node is guaranteed to be visited only once."
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.post_order_visit:4
msgid "The visitor function."
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.substitute:3
msgid "The input."
msgstr ""

#: ../../../python/tvm/tir/stmt_functor.pydocstring of
#: tvm.tir.stmt_functor.substitute:5
msgid "The variable mapping."
msgstr ""
