# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 长德 司, 2021
# HLearning, 2021
# JiaKui Hu, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1713+gbe5f05f3f\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-18 01:16+0000\n"
"PO-Revision-Date: 2021-09-18 07:40+0000\n"
"Last-Translator: JiaKui Hu, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124815/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/api/python/relay/testing.rst:19
msgid "tvm.relay.testing"
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing:1
msgid "Utilities for testing and benchmarks"
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing:1
msgid "**Classes:**"
msgstr "**Classes:**"

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing:1:<autosummary>:1
msgid ":obj:`Prelude <tvm.relay.testing.tvm.relay.testing.Prelude>`\\ \\(\\[mod\\]\\)"
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1
msgid "Contains standard definitions."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing:1
msgid "**Functions:**"
msgstr "**Functions:**"

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
":obj:`enabled_targets "
"<tvm.relay.testing.tvm.relay.testing.enabled_targets>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.testing.utils.enabled_targets:1
msgid "Get all enabled targets with associated devices."
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
":obj:`create_workload "
"<tvm.relay.testing.tvm.relay.testing.create_workload>`\\ \\(net\\[\\, "
"initializer\\, seed\\]\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.init.create_workload:1
msgid "Helper function to create benchmark image classification workload."
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ":obj:`count <tvm.relay.testing.tvm.relay.testing.count>`\\ \\(prelude\\, n\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
"Takes a ConstructorValue corresponding to a nat ADT and converts it into a "
"Python integer."
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
":obj:`make_nat_value <tvm.relay.testing.tvm.relay.testing.make_nat_value>`\\"
" \\(prelude\\, n\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.nat.make_nat_value:1
msgid ""
"The inverse of count(): Given a non-negative Python integer, constructs a "
"ConstructorValue representing that value as a nat."
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
":obj:`make_nat_expr <tvm.relay.testing.tvm.relay.testing.make_nat_expr>`\\ "
"\\(prelude\\, n\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.nat.make_nat_expr:1
msgid ""
"Given a non-negative Python integer, constructs a Python expression "
"representing that integer's value as a nat."
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
":obj:`to_python <tvm.relay.testing.tvm.relay.testing.to_python>`\\ "
"\\(expr\\[\\, mod\\, target\\]\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
"Converts the given Relay expression into a Python script (as a Python AST "
"object)."
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
":obj:`run_as_python <tvm.relay.testing.tvm.relay.testing.run_as_python>`\\ "
"\\(expr\\[\\, mod\\, target\\]\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.py_converter.run_as_python:1
msgid ""
"Converts the given Relay expression into a Python script and executes it."
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
":obj:`gradient <tvm.relay.testing.tvm.relay.testing.gradient>`\\ "
"\\(expr\\[\\, mod\\, mode\\]\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.transform.transform.gradient:1
msgid ""
"Transform the input function, returning a function that calculate the "
"original result, paired with gradient of the input."
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
":obj:`check_grad <tvm.relay.testing.tvm.relay.testing.check_grad>`\\ "
"\\(func\\[\\, inputs\\, test\\_inputs\\, eps\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:1
msgid "Perform numerical gradient checking given a relay function."
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
msgid ""
":obj:`count_ops <tvm.relay.testing.tvm.relay.testing.count_ops>`\\ "
"\\(expr\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1:<autosummary>:1
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.count_ops:1
msgid "count number of times a given op is called in the graph"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude:1
msgid "**Methods:**"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
msgid ""
":obj:`get_name <tvm.relay.testing.tvm.relay.testing.Prelude.get_name>`\\ "
"\\(canonical\\, dtype\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name_static:1
msgid "Get name corresponding to the canonical name"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
msgid ""
":obj:`get_global_var "
"<tvm.relay.testing.tvm.relay.testing.Prelude.get_global_var>`\\ "
"\\(canonical\\, dtype\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_global_var:1
msgid "Get global var corresponding to the canonical name"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
msgid ""
":obj:`get_type <tvm.relay.testing.tvm.relay.testing.Prelude.get_type>`\\ "
"\\(canonical\\, dtype\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_type:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_type_static:1
msgid "Get type corresponding to the canonical name"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
msgid ""
":obj:`get_ctor <tvm.relay.testing.tvm.relay.testing.Prelude.get_ctor>`\\ "
"\\(ty\\_name\\, canonical\\, dtype\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_ctor:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_ctor_static:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_tensor_ctor_static:1
msgid "Get constructor corresponding to the canonical name"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
msgid ""
":obj:`get_name_static "
"<tvm.relay.testing.tvm.relay.testing.Prelude.get_name_static>`\\ "
"\\(canonical\\, dtype\\, shape\\[\\, ...\\]\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
msgid ""
":obj:`get_global_var_static "
"<tvm.relay.testing.tvm.relay.testing.Prelude.get_global_var_static>`\\ "
"\\(canonical\\, dtype\\, shape\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_global_var_static:1
msgid "Get var corresponding to the canonical name"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
msgid ""
":obj:`get_type_static "
"<tvm.relay.testing.tvm.relay.testing.Prelude.get_type_static>`\\ "
"\\(canonical\\, dtype\\, shape\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
msgid ""
":obj:`get_ctor_static "
"<tvm.relay.testing.tvm.relay.testing.Prelude.get_ctor_static>`\\ "
"\\(ty\\_name\\, name\\, dtype\\, shape\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
msgid ""
":obj:`get_tensor_ctor_static "
"<tvm.relay.testing.tvm.relay.testing.Prelude.get_tensor_ctor_static>`\\ "
"\\(name\\, dtype\\, shape\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
msgid ""
":obj:`load_prelude "
"<tvm.relay.testing.tvm.relay.testing.Prelude.load_prelude>`\\ \\(\\)"
msgstr ""

#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.get_name:1:<autosummary>:1
#: ../../../python/tvm/relay/prelude.pydocstring of
#: tvm.relay.prelude.Prelude.load_prelude:1
msgid "Parses the Prelude from Relay's text format into a module."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.testing.utils.enabled_targets:3
msgid ""
"In most cases, you should use :py:func:`tvm.testing.parametrize_targets` "
"instead of this function."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.testing.utils.enabled_targets:6
msgid ""
"In this context, enabled means that TVM was built with support for this "
"target, the target name appears in the TVM_TEST_TARGETS environment "
"variable, and a suitable device for running this target exists.  If "
"TVM_TEST_TARGETS is not set, it defaults to variable DEFAULT_TEST_TARGETS in"
" this module."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.testing.utils.enabled_targets:12
msgid ""
"If you use this function in a test, you **must** decorate the test with "
":py:func:`tvm.testing.uses_gpu` (otherwise it will never be run on the gpu)."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.testing.utils.enabled_targets:0
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.init.create_workload:0
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.transform.transform.gradient:0
#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:0
#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_workload:0
#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:0
#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:0
#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:0
#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.lstm_cell:0
#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_workload:0
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:0
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_workload:0
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:0
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:0
#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:0
msgid "Returns"
msgstr "返回"

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.testing.utils.enabled_targets:15
msgid ""
"**targets** -- A list of pairs of all enabled devices and the associated "
"context"
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.testing.utils.enabled_targets:0
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.transform.transform.gradient:0
#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:0
#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.lstm_cell:0
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:0
msgid "Return type"
msgstr "返回的数据类型"

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.init.create_workload:0
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.transform.transform.gradient:0
#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:0
#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_workload:0
#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.residual_unit:0
#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.resnet:0
#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:0
#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:0
#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:0
#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.lstm_cell:0
#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_workload:0
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_workload:0
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_net:0
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:0
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_net:0
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:0
#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:0
msgid "Parameters"
msgstr "参数"

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.init.create_workload:3
msgid "The selected function of the network."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.init.create_workload:5
msgid "The initializer used"
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.init.create_workload:7
msgid "The seed used in initialization."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.init.create_workload:10
msgid ""
"* **mod** (*tvm.IRModule*) -- The created relay module. * **params** (*dict "
"of str to NDArray*) -- The parameters."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.init.create_workload:10
msgid "**mod** (*tvm.IRModule*) -- The created relay module."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.init.create_workload:11
#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_workload:13
#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:19
#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:17
#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:16
#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_workload:13
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_workload:13
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:15
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:17
msgid "**params** (*dict of str to NDArray*) -- The parameters."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.nat.count:1
msgid ""
"Takes a ConstructorValue corresponding to a nat ADT and converts it into a "
"Python integer. This is an example of using an ADT value in Python."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.py_converter.to_python:1
msgid ""
"Converts the given Relay expression into a Python script (as a Python AST "
"object). For easiest debugging, import the astor package and use "
"to_source()."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.transform.transform.gradient:5
msgid "The input expression, which is a Function or a GlobalVar."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.transform.transform.gradient:9
msgid ""
"The mode of the automatic differentiation algorithm. 'first_order' only "
"works on first order code, but will not produce reference nor closure. "
"'higher_order' works on all code using reference and closure."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.transform.transform.gradient:15
msgid "**expr** -- The transformed expression."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:3
msgid ""
"Compare analytical gradients to numerical gradients derived from two-sided "
"approximation. Note that this test may fail if your function input types are"
" not of high enough precision."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:6
msgid "The relay function to test."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:8
msgid ""
"Optional user-provided input parameters to use. If not given, will generate "
"random normal inputs scaled to be close to the chosen epsilon value to avoid"
" numerical precision loss."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:11
msgid ""
"The inputs to test for gradient matching. Useful in cases where some inputs "
"are not differentiable, such as symbolic inputs to dynamic ops. If not "
"given, all inputs are tested."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:15
msgid ""
"The epsilon value to use for computing numerical gradient approximation."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:17
msgid ""
"The absolute tolerance on difference between numerical and analytical "
"gradients. Note that this needs to be scaled appropriately relative to the "
"chosen eps and inputs."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:20
msgid ""
"The relative tolerance on difference between numerical and analytical "
"gradients. Note that this needs to be scaled appropriately relative to the "
"chosen eps."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:23
msgid "The standard deviation of the inputs."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:25
msgid "The mean of the inputs."
msgstr ""

#: ../../../python/tvm/relay/testing/__init__.pydocstring of
#: tvm.relay.testing.check_grad:27
msgid ""
"A list of targets/devices on which the gradient should be tested.  If not "
"specified, will default to `tvm.testing.enabled_targets()`."
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp:1
msgid "a simple multilayer perceptron"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:1
msgid "Get network a simple multilayer perceptron."
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:4
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:4
msgid "batch_size"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_netNone
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_netNone
msgid "int"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:4
#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_workload:3
#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:3
#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:3
#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:3
#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_workload:7
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:4
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_workload:3
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_net:3
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:3
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_net:1
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:3
msgid "The batch size used in the model"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:7
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:7
msgid "num_classes"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_netNone
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_netNone
msgid "int, optional"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:7
#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_workload:5
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:7
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_net:5
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:5
msgid "Number of claseses"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:10
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:10
msgid "image_shape"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_netNone
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_netNone
msgid "tuple, optional"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:10
#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_workload:7
#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:9
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:10
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_workload:7
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_net:5
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:9
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_net:3
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:7
msgid "The input image shape"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:13
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:13
msgid "dtype"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_netNone
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_netNone
msgid "str, optional"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:13
#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_workload:9
#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:13
#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:13
#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:9
#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_workload:9
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:13
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_workload:9
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:11
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_net:7
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:9
msgid "The data type"
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_net:15
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:15
msgid "**net** -- The dataflow."
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_workload:1
msgid "Get benchmark workload for a simple multilayer perceptron."
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_workload:12
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module that contains a mlp network. "
"* **params** (*dict of str to NDArray*) -- The parameters."
msgstr ""

#: ../../../python/tvm/relay/testing/mlp.pydocstring of
#: tvm.relay.testing.mlp.get_workload:12
msgid ""
"**mod** (*tvm.IRModule*) -- The relay module that contains a mlp network."
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet:1
msgid ""
"Adapted from "
"https://github.com/tornadomeet/ResNet/blob/master/symbol_resnet.py Original "
"author Wei Wu"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet:4
msgid "Implemented the following paper:"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet:6
msgid ""
"Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun. \"Identity Mappings in "
"Deep Residual Networks\""
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.residual_unit:1
msgid "Return ResNet Unit symbol for building ResNet"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.residual_unit:3
msgid "Input data"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.residual_unit:5
msgid "Number of output channels"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.residual_unit:7
msgid "Bottle neck channels factor with regard to num_filter"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.residual_unit:9
msgid "Stride used in convolution"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.residual_unit:11
msgid ""
"True means channel number between input and output is the same, otherwise "
"means differ"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.residual_unit:14
msgid "Base name of the operators"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.resnet:1
msgid "Return ResNet Program."
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.resnet:3
msgid "Number of units in each stage"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.resnet:5
msgid "Number of stages"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.resnet:7
msgid "Channel size of each stage"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.resnet:9
msgid "Output size of symbol"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.resnet:11
msgid "The shape of input data."
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.resnet:13
msgid "Whether apply bottleneck transformation."
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.resnet:15
#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:11
msgid "The data layout for conv2d"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.resnet:17
msgid "The global data type."
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_net:1
msgid ""
"Adapted from "
"https://github.com/tornadomeet/ResNet/blob/master/train_resnet.py Original "
"author Wei Wu"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:1
msgid "Get benchmark workload for resnet"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:5
#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:5
#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_workload:5
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:5
msgid "Number of classes"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:7
msgid "Number of layers"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:15
msgid "Extra arguments"
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:18
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module that contains a ResNet "
"network. * **params** (*dict of str to NDArray*) -- The parameters."
msgstr ""

#: ../../../python/tvm/relay/testing/resnet.pydocstring of
#: tvm.relay.testing.resnet.get_workload:18
msgid ""
"**mod** (*tvm.IRModule*) -- The relay module that contains a ResNet network."
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan:1
msgid "Net of the generator of DCGAN"
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan:3
msgid ""
"Adopted from: https://github.com/tqchen/mxnet-"
"gan/blob/main/mxgan/generator.py"
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan:6
msgid ""
"Reference: Radford, Alec, Luke Metz, and Soumith Chintala. \"Unsupervised "
"representation learning with deep convolutional generative adversarial "
"networks.\" arXiv preprint arXiv:1511.06434 (2015)."
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.deconv2d:1
msgid "a deconv layer that enlarges the feature map"
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.deconv2d_bn_relu:1
msgid "a block of deconv + batch norm + relu"
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_net:1
msgid "get net of dcgan generator"
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:1
msgid "Get benchmark workload for a DCGAN generator"
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:5
msgid "The shape of output image, layout=\"CHW\""
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:7
msgid "The number of final feature maps in the generator"
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:9
msgid "The length of random input"
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:11
msgid "The layout of conv2d transpose"
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:16
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module that contains a DCGAN "
"network. * **params** (*dict of str to NDArray*) -- The parameters."
msgstr ""

#: ../../../python/tvm/relay/testing/dcgan.pydocstring of
#: tvm.relay.testing.dcgan.get_workload:16
msgid ""
"**mod** (*tvm.IRModule*) -- The relay module that contains a DCGAN network."
msgstr ""

#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet:1
msgid "Port of NNVM version of MobileNet to Relay."
msgstr ""

#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.conv_block:1
msgid "Helper function to construct conv_bn-relu"
msgstr ""

#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.separable_conv_block:1
msgid "Helper function to get a separable conv block"
msgstr ""

#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.mobile_net:1
msgid "Function to construct a MobileNet"
msgstr ""

#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:1
msgid "Get benchmark workload for mobilenet"
msgstr ""

#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:7
msgid "The input image shape, cooperate with layout"
msgstr ""

#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:11
msgid ""
"The data layout of image_shape and the operators cooperate with image_shape"
msgstr ""

#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:15
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module that contains a MobileNet "
"network. * **params** (*dict of str to NDArray*) -- The parameters."
msgstr ""

#: ../../../python/tvm/relay/testing/mobilenet.pydocstring of
#: tvm.relay.testing.mobilenet.get_workload:15
msgid ""
"**mod** (*tvm.IRModule*) -- The relay module that contains a MobileNet "
"network."
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm:1
msgid "Implementation of a Long Short-Term Memory (LSTM) cell."
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm:3
msgid ""
"Adapted from: "
"https://gist.github.com/merrymercy/5eb24e3b019f84200645bd001e9caae9"
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.lstm_cell:1
msgid "Long-Short Term Memory (LSTM) network cell."
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.lstm_cell:3
msgid "Number of units in output symbol."
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.lstm_cell:5
msgid "Batch size (length of states)."
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.lstm_cell:8
msgid ""
"**result** -- A Relay function that evaluates an LSTM cell. The function "
"takes in a tensor of input data, a tuple of two states, and weights and "
"biases for dense operations on the inputs and on the state. It returns a "
"tuple with two members, an output tensor and a tuple of two new states."
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_net:1
msgid "Constructs an unrolled RNN with LSTM cells"
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_workload:1
msgid "Get benchmark workload for an LSTM RNN."
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_workload:3
msgid "The number of iterations in the desired LSTM RNN."
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_workload:5
msgid "The size of the hiddxen state"
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_workload:12
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module that contains a LSTM network."
" * **params** (*dict of str to NDArray*) -- The parameters."
msgstr ""

#: ../../../python/tvm/relay/testing/lstm.pydocstring of
#: tvm.relay.testing.lstm.get_workload:12
msgid ""
"**mod** (*tvm.IRModule*) -- The relay module that contains a LSTM network."
msgstr ""

#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3:1
msgid "Inception V3, suitable for images with around 299 x 299"
msgstr ""

#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3:3
msgid ""
"Reference: Szegedy, Christian, et al. \"Rethinking the Inception "
"Architecture for Computer Vision.\" arXiv preprint arXiv:1512.00567 (2015)."
msgstr ""

#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3:9
msgid "Adopted from https://github.com/apache/incubator-mxnet/blob/"
msgstr ""

#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3:8
msgid "master/example/image-classification/symbols/inception-v3.py"
msgstr ""

#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_net:1
msgid "Get network a Inception v3 network."
msgstr ""

#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_workload:1
msgid "Get benchmark workload for InceptionV3"
msgstr ""

#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_workload:12
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module that contains an Inception V3"
" network. * **params** (*dict of str to NDArray*) -- The parameters."
msgstr ""

#: ../../../python/tvm/relay/testing/inception_v3.pydocstring of
#: tvm.relay.testing.inception_v3.get_workload:12
msgid ""
"**mod** (*tvm.IRModule*) -- The relay module that contains an Inception V3 "
"network."
msgstr ""

#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet:1
msgid "Symbol of SqueezeNet"
msgstr ""

#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet:3
msgid ""
"Reference: Iandola, Forrest N., et al. \"Squeezenet: Alexnet-level accuracy "
"with 50x fewer parameters and< 0.5 mb model size.\" (2016)."
msgstr ""

#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_net:1
msgid "Get symbol of SqueezeNet"
msgstr ""

#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_net:7
msgid "The number of classification results"
msgstr ""

#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_net:9
#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:7
msgid "\"1.0\" or \"1.1\" of SqueezeNet"
msgstr ""

#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:1
msgid "Get benchmark workload for SqueezeNet"
msgstr ""

#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:14
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module that contains a SqueezeNet "
"network. * **params** (*dict of str to NDArray*) -- The parameters."
msgstr ""

#: ../../../python/tvm/relay/testing/squeezenet.pydocstring of
#: tvm.relay.testing.squeezenet.get_workload:14
msgid ""
"**mod** (*tvm.IRModule*) -- The relay module that contains a SqueezeNet "
"network."
msgstr ""

#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg:1
msgid "References:"
msgstr ""

#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg:3
msgid ""
"Simonyan, Karen, and Andrew Zisserman. \"Very deep convolutional networks "
"for large-scale image recognition.\" arXiv preprint arXiv:1409.1556 (2014)."
msgstr ""

#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_feature:1
msgid "Get VGG feature body as stacks of convolutions."
msgstr ""

#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_classifier:1
msgid "Get VGG classifier layers as fc layers."
msgstr ""

#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_net:9
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:11
msgid "Number of layers for the variant of vgg. Options are 11, 13, 16, 19."
msgstr ""

#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_net:11
#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:13
msgid "Use batch normalization."
msgstr ""

#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:1
msgid "Get benchmark workload for VGG nets."
msgstr ""

#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:16
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module that contains a VGG network. "
"* **params** (*dict of str to NDArray*) -- The parameters."
msgstr ""

#: ../../../python/tvm/relay/testing/vgg.pydocstring of
#: tvm.relay.testing.vgg.get_workload:16
msgid ""
"**mod** (*tvm.IRModule*) -- The relay module that contains a VGG network."
msgstr ""

#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet:1
msgid ""
"Port of MxNet version of Densenet to Relay. https://github.com/apache"
"/incubator-mxnet/blob/master/python/mxnet/gluon/model_zoo/vision/densenet.py"
msgstr ""

#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:1
msgid "Gets benchmark workload for densenet."
msgstr ""

#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:3
msgid ""
"Parameter for the network size. The supported sizes are 121, 161, 169, and "
"201."
msgstr ""

#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:6
msgid "The number of classes."
msgstr ""

#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:8
msgid "The batch size for the network."
msgstr ""

#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:10
msgid "The shape of the input data."
msgstr ""

#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:12
msgid "The data type of the input data."
msgstr ""

#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:15
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module that contains a DenseNet "
"network. * **params** (*dict of str to NDArray*) -- The benchmark paraeters."
msgstr ""

#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:15
msgid ""
"**mod** (*tvm.IRModule*) -- The relay module that contains a DenseNet "
"network."
msgstr ""

#: ../../../python/tvm/relay/testing/densenet.pydocstring of
#: tvm.relay.testing.densenet.get_workload:16
msgid "**params** (*dict of str to NDArray*) -- The benchmark paraeters."
msgstr ""
