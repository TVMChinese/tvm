# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# juzi, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1734+gca660ba1e\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-12 10:06+0000\n"
"PO-Revision-Date: 2021-09-18 07:41+0000\n"
"Last-Translator: juzi, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124815/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/contribute/code_review.rst:22
msgid "Perform Code Reviews"
msgstr "执行代码审查"

#: ../../_staging/contribute/code_review.rst:25
msgid ""
"Open source code is maintained by a community with diverse backgrounds, "
"interests, and goals. Hence it is important to provide clear, documented and"
" maintainable code and processes. Code reviews are a shepherding process "
"used to collectively spot potential problems, improve quality of the code, "
"and educate both contributors and reviewers about the code base and its "
"assumptions. It is also one mechanism to ensure there are multiple people "
"who can maintain a related piece of code together. Contributors are "
"encouraged to polish the code to a reviewable state before requesting "
"reviews. This is especially important for committer candidates, as "
"committers are expected to participate in not only writing code but also "
"reviewing it."
msgstr ""
"开源代码由具有不同背景、兴趣和目标的社区维护。因此，提供清晰、文档化和可维护的代码和过程是很重要的。代码审查是一个指导过程，用于共同发现潜在问题，提高代码质量，并训练贡献者和审查者关于代码库及其假设的知识。它也是一种可以确保有多个人可以一起维护一段相关代码的机制。鼓励贡献者在请求审查之前将代码修改至可审查状态。这对于提交者候选人来说尤其重要，因为提交者不仅要参与代码的编写，还要参与代码的审查。"

#: ../../_staging/contribute/code_review.rst:33
msgid ""
"This document is a living guideline for code review in open source. Please "
"also take sometime to read :ref:`community_guide` about the general "
"development process."
msgstr "本文档是在开放源码中做代码审查的或指南，请花费一些时间阅读:ref:`community_guide`来了解通常的开发过程"

#: ../../_staging/contribute/code_review.rst:37
msgid "Building Trust"
msgstr "建立信任"

#: ../../_staging/contribute/code_review.rst:39
msgid ""
"First and foremost, we are building a community that based on trust, which "
"takes time and effort to both build and maintain.  We expect our community "
"members to work together in a constructive way and work together with common"
" sense. Although we all have different sets of backgrounds, interests and "
"goals we must work together to find solutions that work for the larger "
"community. Trust-based collaboration is also a key tenant of the Apache way "
"and an important factor to consider in growing the community, and promoting "
"members to official roles."
msgstr ""
"首先也是最重要的是，我们正在建立一个基于信任的社区，这需要时间和努力来建立和维护。我们希望我们的社区成员可以达成共识，以建设性的方式合作。尽管我们都有不同的背景、兴趣和目标，但我们必须共同努力来寻找适合更大社区的解决方案。基于信任的协作也是Apache方式的关键一员，是社区成长中的重要因素，并促进成员成为官方角色。"

#: ../../_staging/contribute/code_review.rst:47
msgid "Community Participation"
msgstr "社区参与"

#: ../../_staging/contribute/code_review.rst:49
msgid ""
"Everyone is welcomed to comment on PRs. We encourage committers to wait for "
"some period of time(e.g. three days) before merging PR that contains a major"
" architecture change. The goal is to give people time to speak up and "
"express interest in reviewing and participate."
msgstr ""
"欢迎大家对PRs发表评论。我们鼓励提交者在合并包含重大架构更改的PR之前等待一段时间（如三天）。目的是让人们有时间发言并且表达对复查和参与的兴趣。"

#: ../../_staging/contribute/code_review.rst:53
msgid ""
"Remembering that we are all coming from different backgrounds is important "
"here. For example some community members work in different time zones, only "
"work on open source during work hours, or may be traveling or having other "
"events going on in their lives. An important part of working in a large "
"project is ensuring there is collective understanding, so no one person is a"
" bottleneck. While it is important to allow time for participation in code "
"review we also can not block all changes on all reviewers. Remember that "
"helping people land PRs is a great way to encourage broader participation, "
"especially for those who volunteer their time to contribute."
msgstr ""
"记住我们都来自不同的背景在这里很重要。例如，一些社区成员在不同的时区工作，只能在工作时间使用开源软件，或者可能在旅行或在忙于其他事情。在大型项目中工作的一个重要部分是确保有集体的理解，因此没有一个人是累赘。虽然留出时间参与代码评审很重要，但我们也不能阻止所有审查者的所有变数。请记住，帮助人们获得PRs是鼓励更广泛参与的一个很好的方式，特别是对于那些自愿花费时间做贡献的人。"

#: ../../_staging/contribute/code_review.rst:60
msgid ""
"Part of this is trusting and communicating with fellow maintainers that if "
"changes need to be applied in the future that PR authors will later follow "
"through on their promises. It is the responsibility of committers to listen "
"to all feedback whether from PMC members or new contributors and consider "
"what actions need to be taken."
msgstr ""

#: ../../_staging/contribute/code_review.rst:65
msgid "Read the code carefully"
msgstr "仔细阅读代码"

#: ../../_staging/contribute/code_review.rst:67
msgid ""
"Sometimes we may quickly read through the code and only pick up on a "
"selective aspects of the code. These type of comments are usually helpful "
"and should be welcomed in the community. However,  they are only part of "
"performing code review and should be part of more comprehensive feedback. A "
"good and careful code review is a large time investment and sometimes can be"
" longer than writing the actual contribution."
msgstr ""
"有时，我们可能会快速阅读代码，只了解代码的某些方面。这些类型的注释通常很有帮助而且在社区应该受到欢迎。然而，它们只是执行代码审查的一部分，应该说是更全面反馈的一部分。一个好的、仔细的代码审查需要消耗大量的时间，有时可能比编写实际贡献还要长。"

#: ../../_staging/contribute/code_review.rst:72
msgid ""
"For example receiving only highly critical feedback on minor aspects of your"
" PR rarely feels good, and it can be discouraging if your time and effort "
"was not reciprocated during review. Practicing empathy when acting both as a"
" contributor and committer is important and can help make you a more "
"effective code reviewer and contributor."
msgstr ""
"举个例子，如果你的PR只在一些次要方面收到严厉的批评，你的感觉就不会很好，如果在审查过程中你的时间和努力没有得到回报，这也可能就会让人沮丧。在同时作为贡献者和提交者时，学会同情非常重要，可以帮助您成为更有效率的代码审查者和贡献者。"

#: ../../_staging/contribute/code_review.rst:76
msgid ""
"We expect that all committers carefully read and understand the code before "
"signing off. There is a lot of trust involved when a committer hits the "
"merge button. In the meantime, we acknowledge that sometimes problems slip "
"through, in that case, the merger is responsible for ensuring the correct "
"follow up actions are taken."
msgstr ""

#: ../../_staging/contribute/code_review.rst:81
msgid "Be Respectful"
msgstr "尊重他人"

#: ../../_staging/contribute/code_review.rst:83
msgid ""
"To everyone who are making comments: making constructive comment will help "
"new contributors to land their PRs timely and help us welcome new members to"
" the community."
msgstr "对所有发表意见的人：发表建设性意见将有助于新的贡献者及时获得他们的PRs，并有助于我们欢迎新成员加入社区。"

#: ../../_staging/contribute/code_review.rst:86
msgid ""
"To authors: reviewers should spend significant time reading the code, and a "
"careful review could be as time intensive as writing the code from scratch. "
"Respectfully address review comments and reciprocate the review by helping "
"review others changes in the future."
msgstr ""
"对作者来说：审查者应该花大量的时间阅读代码，而仔细的审查可能和从头开始编写代码一样耗费大量的时间。尊重审查意见，并在将来通过帮助审查其他变更来作为回报。"

#: ../../_staging/contribute/code_review.rst:90
msgid ""
"Most importantly focus on having a constructive conversation, and try to "
"assume best intentions when interacting as a reviewer. If there is something"
" in the process not working, consider getting some face time with the other "
"contributors and discussing how to improve the process or communication."
msgstr ""
"最重要的是，专注于进行建设性的对话，并在作为审查者进行互动时，尽量假设自己的意图是最好的。如果这个过程中有什么不起作用了，考虑花费一些时间与其他贡献者讨论如何改进过程或交流。"

#: ../../_staging/contribute/code_review.rst:95
msgid "Factors to Consider about Code Quality"
msgstr "关于代码质量需要考虑的因素"

#: ../../_staging/contribute/code_review.rst:97
msgid ""
"High quality code is critical to the long term success of the project. There"
" are many factors of code quality to consider during a code review:"
msgstr "高质量的代码对项目的长期成功至关重要。在代码审查期间有许多代码质量方面的因素需要考虑："

#: ../../_staging/contribute/code_review.rst:100
msgid ""
"F0: Overall architecture. This includes the definition of public modules, "
"key data structures and public interfaces. Good architectural choices are "
"critical to the success of the project in the long run."
msgstr "F0：总体架构。这包括公共模块、关键数据结构和公共接口的定义。选择良好的体系结构对项目的长期成功至关重要。"

#: ../../_staging/contribute/code_review.rst:102
msgid ""
"F1: Architectural consistency. There are usually multiple ways to implement "
"a new feature. We must ensure new features are consistent with previous "
"overall architectural choices and interact well with the existing code. "
"Every new feature increases the complexity of the project, and a consistent "
"design ideally minimizes the increase in complexity bought by a new feature,"
" making it easier to maintain code in the long run."
msgstr ""
"F1：架构一致性。通常有多种方法来实现新功能。我们必须确保新特性与以前的总体架构选择一致，并且能和现有的代码进行良好的交互。每一个新特性都会增加项目的复杂性，而一致的设计理念能将新特性带来的复杂性增加程度降至最低，从而使代码的长期维护更加容易。"

#: ../../_staging/contribute/code_review.rst:106
msgid ""
"F2: Code robustness and test coverage. Ensure code runs correctly in all "
"possible settings(platforms), ensure test coverage of the new feature. Clear"
" error messages for user facing errors."
msgstr "F2：代码健壮性和测试覆盖率。确保代码在所有可能的设置（平台）中正确运行，确保新功能的测试覆盖率。清除用户面对的错误的错误消息。"

#: ../../_staging/contribute/code_review.rst:108
msgid ""
"F3: User facing API documentation: documentation of public user facing APIs "
"and key module interfaces are mandatory. This includes the API, data "
"structures that appears in the public interface (i.e., `include/tvm` and "
"user facing python APIs). We generally encourage well documented code and "
"include some form of documentations for internal APIs that are used in "
"multiple places, see also F4."
msgstr ""
"F3:面向用户的API文档:面向公共用户的API和关键模块接口的文档是必需的。这包括API，出现在公共接口中的数据结构(例如 `include/tvm`"
" 和面向用户的python API)。我们通常鼓励有良好文档记录的代码和为在多个地方使用的内部API提供某种形式的文档，参考F4。"

#: ../../_staging/contribute/code_review.rst:112
msgid ""
"F4: Code readability. Readability involves multiple aspects: instructive and"
" consistent function names, clear implementation of the overall flow, "
"descriptive comments for complex code logic and internal functions. Readable"
" code is easier to maintain."
msgstr ""

#: ../../_staging/contribute/code_review.rst:115
msgid ""
"Architectural design and consistency are the most important factors since "
"they are likely to introduce the most long term technical debt. As a result,"
" committers should most carefully consider these factors before merging the "
"code."
msgstr ""

#: ../../_staging/contribute/code_review.rst:118
msgid ""
"Test coverage and API documentation are expected for code contributions."
msgstr ""

#: ../../_staging/contribute/code_review.rst:120
msgid ""
"Code readability is relatively a subjective matter compared to the other "
"ones. Different people have different thoughts on how to best write code. "
"Reviewers should make constructive and actionable comments. In the meantime,"
" code review should not be used as a way to get others to write code exactly"
" the way you would. Conversely you should also consider that what you may "
"easily understand, or find acceptable might not work for the larger "
"community or other members. Use your judgment on what is appropriate based "
"on the content and the scope of the contribution and where the contributor "
"is coming from."
msgstr ""

#: ../../_staging/contribute/code_review.rst:127
msgid ""
"We follow common :ref:`code_guide` when writing code. Style guides help "
"ensure that code is readable and maintainable by others, long after the "
"original author has moved on. Style guides are more than about code "
"formatting — they also pertain to the correct way to document code, variable"
" naming, and other conventions that are not enforced by automatic "
"formatters."
msgstr ""

#: ../../_staging/contribute/code_review.rst:132
msgid "Consensus Building"
msgstr ""

#: ../../_staging/contribute/code_review.rst:134
msgid ""
"Disagreements can happen during code reviews. We encourage building "
"consensus among the people involved. We are working together and building "
"trust with each other in OSS. The nature of OSS means sometimes we make "
"compromises on less significant issues to make steady progress and welcome "
"broader participation in the community. Compromise unfortunately means "
"sometimes the world will not be exactly as we would like, this true even for"
" leaders of the community."
msgstr ""

#: ../../_staging/contribute/code_review.rst:139
msgid ""
"Be civil and build consensus through constructive technical-based "
"conversations."
msgstr ""

#: ../../_staging/contribute/code_review.rst:140
msgid ""
"A committer who owns the area can serve as a shepherd to drive the "
"discussion by taking all the conversations into consideration, and suggest a"
" resolution with to move forward."
msgstr ""

#: ../../_staging/contribute/code_review.rst:142
msgid ""
"Because a lot of trust is involved on the committer(shepherd), they should "
"read the PR carefully before sign off. Additionally, the merger should also "
"take the responsibility to followup in case there are problems caused by the"
" merge."
msgstr ""

#: ../../_staging/contribute/code_review.rst:146
msgid "Consistency"
msgstr ""

#: ../../_staging/contribute/code_review.rst:148
msgid ""
"A final remark is that we are all human and its hard to always be perfectly "
"consistent. If contributors feel that you didn't apply these guidelines in a"
" consistent way it is important to listen and hear folks out. We will "
"constantly have to iterate on processes and guidelines as we evolve as a "
"community. Our goal is to strive to be consistent and objective but all of "
"us are unfortunately human and imperfect and will need to adjust and learn."
msgstr ""

#: ../../_staging/contribute/code_review.rst:153
msgid "Additional Recommendations"
msgstr ""

#: ../../_staging/contribute/code_review.rst:156
msgid "Scope the PRs"
msgstr ""

#: ../../_staging/contribute/code_review.rst:158
msgid ""
"We recommend authors to send well scoped PRs that are easy to review and "
"revert in case there is a problem. Authors avoid merging multiple unrelated "
"changes into a single PR and split them into separate PRs."
msgstr ""

#: ../../_staging/contribute/code_review.rst:162
msgid "Label the PRs with Area Prefix"
msgstr ""

#: ../../_staging/contribute/code_review.rst:163
msgid ""
"When sending pull requests, it is helpful to prefix the PR title with the "
"areas related PR(e.g. use [TIR] for TIR-related changes). This would help "
"people recognize the related areas and find PRs they are interested in."
msgstr ""

#: ../../_staging/contribute/code_review.rst:168
msgid "Deliberate on API and Data Structures"
msgstr ""

#: ../../_staging/contribute/code_review.rst:169
msgid ""
"A minimum and stable API is critical to the project’s life. A good API makes"
" a huge difference. Always think very carefully about all the aspects "
"including naming, argument definitions and behavior."
msgstr ""

#: ../../_staging/contribute/code_review.rst:171
msgid ""
"When possible, pay more attention still to the proposed API design during "
"code reviews. Remember, it is easier to improve code implementation, but it "
"is extremely hard to change an API once accepted. We should treat data "
"structures that are shared across modules(e.g. AST) in the same way. If/when"
" uncertain, start a conversation with more developers before committing."
msgstr ""

#: ../../_staging/contribute/code_review.rst:176
msgid "Here are some useful principles for designing APIs:"
msgstr ""

#: ../../_staging/contribute/code_review.rst:178
msgid ""
"Be consistent with existing well-known package’s APIs if the features "
"overlap. For example, tensor operation APIs should always be consistent with"
" the numpy API."
msgstr ""

#: ../../_staging/contribute/code_review.rst:180
msgid ""
"Be consistent with existing APIs in the same project. For example, we should"
" use the same argument ordering across all the optimization passes, so there"
" is no \"surprise\" when using them."
msgstr ""

#: ../../_staging/contribute/code_review.rst:183
msgid ""
"Think about whether the API will change in the future. For example, we will "
"have more options like loop_unrolling and device placement policy as we add "
"more optimizations in build. We can package optimization knobs into a build "
"configuration object. In this way, the build API is stable over time, even "
"though it may be enriched."
msgstr ""

#: ../../_staging/contribute/code_review.rst:187
msgid ""
"Write documentation. Documentation is mandatory for APIs and sometimes "
"writing documents helps us to think further about the design as well as "
"whether we need to add further clarifications."
msgstr ""

#: ../../_staging/contribute/code_review.rst:189
msgid ""
"Minimum. Think about how many lines of code a user has to write to use the "
"API. Remove layers of abstraction when possible."
msgstr ""

#: ../../_staging/contribute/code_review.rst:193
msgid "Minimize Dependencies"
msgstr ""

#: ../../_staging/contribute/code_review.rst:194
msgid ""
"Always be cautious in introducing dependencies. While it is important to "
"reuse code and avoid reinventing the wheel, dependencies can increase burden"
" of users in deployment. A good design principle is that a feature or "
"function should only have a dependecy if/when a user actually use it."
msgstr ""

#: ../../_staging/contribute/code_review.rst:199
msgid "Concise Implementation"
msgstr ""

#: ../../_staging/contribute/code_review.rst:200
msgid ""
"Some basic principles applied here: favor vectorized array code over loops, "
"use existing APIs that solve the problem."
msgstr ""

#: ../../_staging/contribute/code_review.rst:203
msgid "Document Lessons in Code Reviews"
msgstr ""

#: ../../_staging/contribute/code_review.rst:204
msgid ""
"When you find there are some common or recurring lessons that can be "
"summarized, add it to the :ref:`code_guide`. It is always good to refer to "
"the guideline document when requesting changes, so the lessons can be shared"
" to all the community."
msgstr ""

#: ../../_staging/contribute/code_review.rst:211
msgid "Learn from other Code Reviews"
msgstr ""

#: ../../_staging/contribute/code_review.rst:212
msgid ""
"There can be multiple reviewers reviewing the same changes. Many times other"
" reviewers may spot things you did not find. Try to learn from other code "
"reviews, when possible, document these lessons."
msgstr ""

#: ../../_staging/contribute/code_review.rst:216
msgid "Approve and Request Changes Explicitly"
msgstr ""

#: ../../_staging/contribute/code_review.rst:217
msgid ""
"The contributor and code owner can request code reviews from multiple "
"reviewers. Remember to approve changes when your comments are addressed in a"
" code review. To do so -- please click on changes tab in the pull request, "
"then select approve, or comment on the code and click request changes. Code "
"owner can decide if the code can be merged in case by case if some of the "
"reviewers did not respond in time(e.g. a week) and existing reviews are "
"sufficient."
msgstr ""
