# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Huan Mei, 2021
# HLearning, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1734+gca660ba1e\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-12 10:06+0000\n"
"PO-Revision-Date: 2021-10-13 01:34+0000\n"
"Last-Translator: HLearning, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124815/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:4
msgid ""
"Click :ref:`here "
"<sphx_glr_download_how_to_work_with_microtvm_micro_reference_vm.py>` to "
"download the full example code"
msgstr ""
"点击 :ref:`这里 "
"<sphx_glr_download_how_to_work_with_microtvm_micro_reference_vm.py>` "
"下载完整的样例代码"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:14
msgid "microTVM Reference Virtual Machines"
msgstr "microTVM 虚拟机"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:15
msgid "**Author**: `Andrew Reusch <areusch@octoml.ai>`_"
msgstr "**作者**: `Andrew Reusch <areusch@octoml.ai>`_"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:17
msgid ""
"This tutorial explains how to launch microTVM Reference Virtual Machines. "
"You can use these to develop on real physical hardware without needing to "
"individually install the microTVM dependencies. These are also particularly "
"useful when trying to reproduce behavior with microTVM, such as when filing "
"bug reports."
msgstr ""
"此教学手册教您如何启动microTVM虚拟机。通过此手册，您可以在不安装microTVM依赖库的情况下使用物理设备进行开发。同时，当您需要使用microTVM重现一些代码行为时，例如编写bug报告，此手册能够提供有效的帮助。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:22
msgid ""
"microTVM is the effort to allow TVM to build and execute models on bare-"
"metal microcontrollers. microTVM aims to be compatible with a wide variety "
"of SoCs and runtime environments (i.e. bare metal, RTOS, etc). However, some"
" stable software environment is needed to allow developers to share and "
"reproduce bugs and results. The microTVM Reference Virtual Machines are "
"intended to provide that environment."
msgstr ""
"microTVM可以有效地使用TVM在低端微控制器上构建和运行模型。microTVM旨在与各种各样的SoC和运行时环境（如裸机、RTOS等）相互兼容。然而，开发人员需要一些必要的软件依赖环境才能够共享和再现bug和运行结果。microTVM虚拟机旨在提供这些环境。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:29
msgid "How it works"
msgstr "工作原理"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:31
msgid ""
"No Virtual Machines are stored in the TVM repository--instead, the files "
"stored in ``apps/microtvm/reference-vm`` describe how to build VMs to the "
"Vagrant_ VM builder tool."
msgstr ""
"TVM代码仓库中并没有提供虚拟机，在 ``apps/microtvm/reference-vm`` 目录下的文件描述了如何使用 Vagrant_ "
"虚拟机构建工具来创建一个microTVM虚拟机。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:34
msgid "The Reference VMs are split into two parts:"
msgstr "MicroTVM虚拟机分为两个部分："

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:36
msgid ""
"A Vagrant Base Box, which contains all of the stable dependencies for that "
"platform. Build scripts are stored in ``apps/microtvm/reference-"
"vm/<platform>/base-box``. TVM committers run these when a platform's "
"\"stable\" dependencies change, and the generated base boxes are stored in "
"`Vagrant Cloud`_."
msgstr ""
"一个Vagrant基础镜像，它包含了所有必要的软件依赖环境，构建该镜像的脚本保存在 ``apps/microtvm/reference-"
"vm/<platfrom>/base-box`` 。当平台的“稳定”依赖环境发生变化时，TVM提交者将会运行这个脚本来生成新的基础镜像，该镜像会被上传到"
" `Vagrant Cloud`_ 。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:40
msgid ""
"A per-workspace VM, which users normally build using the Base Box as a "
"starting point. Build scripts are stored in ``apps/microtvm/reference-"
"vm/<platform>`` (everything except ``base-box``)."
msgstr ""
"一个虚拟机工作环境，用户通常使用基础镜像作为起点来构建它。构建脚本保存在 ``apps/microtvm/reference-"
"vm/<paltform>`` （除了 ``base-box`` ）。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:47
msgid "Setting up the VM"
msgstr "设置虚拟机"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:50
msgid "Installing prerequisites"
msgstr "安装必要软件"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:52
msgid "A minimal set of prerequisites are needed:"
msgstr "这些必要软件包括："

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:54
msgid "`Vagrant <https://vagrantup.com>`__"
msgstr "`Vagrant <https://vagrantup.com>`__"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:55
msgid ""
"A supported Virtual Machine hypervisor (**VirtualBox**, **Parallels**, or "
"**VMWare Fusion/Workstation**). `VirtualBox <https://www.virtualbox.org>`__ "
"is a suggested free hypervisor, but please note that the `VirtualBox "
"Extension Pack`_ is required for proper USB forwarding. If using VirtualBox,"
" also consider installing the `vbguest <https://github.com/dotless-"
"de/vagrant-vbguest>`_ plugin."
msgstr ""
"一个虚拟机管理程序（ **VirtualBox** 、 **Parallels** 或 **VMWare Fusion/Workstation** "
"）。TVM推荐使用 `VirtualBox <https://www.virtualbox.org>`__ ，因为它是免费的虚拟机管理程序，但请注意， "
"`VirtualBox Extension Pack`_ 是使用USB转发功能所必要的扩展包。如果选择使用VirtualBox，您还可以考虑安装 "
"`vbguest <https://github.com/dotless-de/vagrant-vbguest>`_ 插件。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:62
msgid ""
"If required for your hypervisor, the `Vagrant provider plugin "
"<https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-"
"Plugins#providers>`__ (or see `here <https://www.vagrantup.com/vmware>`__ "
"for VMWare)."
msgstr ""
"如果您还需要其他的插件， `Vagrant provider plugin "
"<https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-"
"Plugins#providers>`__ 将提供更多程序插件（或在 `此处 <https://www.vagrantup.com/vmware>`__"
" 查找有关VMWare的插件）。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:66
msgid "First boot"
msgstr "首次启动"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:68
msgid ""
"The first time you use a reference VM, you need to create the box locally "
"and then provision it."
msgstr "当您第一次使用microTVM虚拟机时，您需要在本地创建一个镜像，然后给它提供必要准备。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:78
msgid ""
"This command will take a couple of minutes to run and will require 4 to 5GB "
"of storage on your machine. It does the following:"
msgstr "这段命令行需要一些时间来运行，同时，它将在您的机器上占用4到5GB的存储空间。这些代命令行的作用如下："

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:81
msgid ""
"Downloads the `microTVM base box`_ and clones it to form a new VM specific "
"to this TVM directory."
msgstr "下载 `MicroTVM基础镜像`_ ，然后使用它生成一个特定于这个TVM目录的新虚拟机。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:82
msgid ""
"Mounts your TVM directory (and, if using ``git-subtree``, the original "
"``.git`` repo) into the VM."
msgstr "将TVM目录挂载到虚拟机（如果使用 ``git-subtree`` ， ``.git`` 根目录将会被挂载）。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:84
msgid ""
"Builds TVM and installs a Python virtualenv with the dependencies "
"corresponding with your TVM build."
msgstr "构建TVM并安装与之相对应的Python虚拟环境。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:90
msgid "Connect Hardware to the VM"
msgstr "将硬件连接到虚拟机"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:92
msgid ""
"Next, you need to configure USB passthrough to attach your physical "
"development board to the virtual machine (rather than directly to your "
"laptop's host OS)."
msgstr "接下来，您需要配置 USB 转发设置，以便通过USB接口将物理开发板连接到虚拟机（而不是直接连接到主机上的操作系统）。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:95
msgid ""
"It's suggested you setup a device filter, rather than doing a one-time "
"forward, because often the device may reboot during the programming process "
"and you may, at that time, need to enable forwarding again. It may not be "
"obvious to the end user when this occurs. Instructions to do that:"
msgstr ""
"建议您设置设备筛选器，而不是设置单次转发，因为在编程过程中设备通常会重新启动，而此时您需要再次启用转发。当这种情况发生时，开发用户可能不易察觉需要再次启动转发。开启设备筛选器的方法如下："

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:99
msgid ""
"`VirtualBox <https://www.virtualbox.org/manual/ch03.html#usb-support>`__"
msgstr ""
"`VirtualBox <https://www.virtualbox.org/manual/ch03.html#usb-support>`__"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:100
msgid "`Parallels <https://kb.parallels.com/122993>`__"
msgstr "`Parallels <https://kb.parallels.com/122993>`__"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:101
msgid ""
"`VMWare Workstation <https://docs.vmware.com/en/VMware-Workstation-"
"Pro/15.0/com.vmware.ws.using.doc/GUID-E003456F-EB94-4B53-9082-293D9617CB5A.html>`__"
msgstr ""
"`VMWare Workstation <https://docs.vmware.com/en/VMware-Workstation-"
"Pro/15.0/com.vmware.ws.using.doc/GUID-E003456F-EB94-4B53-9082-293D9617CB5A.html>`__"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:104
msgid "Rebuilding TVM inside the Reference VM"
msgstr "在microTVM虚拟机中重新构建TVM"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:106
msgid ""
"After the first boot, you'll need to ensure you keep the build, in "
"``$TVM_HOME/build-microtvm-zephyr``, up-to-date when you modify the C++ "
"runtime or checkout a different revision. You can either re-provision the "
"machine (``vagrant provision`` in the same directory you ran ``vagrant up`` "
"before) or manually rebuild TVM yourself."
msgstr ""
"在第一次启动之后，每当您修改了C++运行时代码或者切换到不同版本的时候，您都需要重新构建TVM以保持构建文件是最新的，这些构建文件在 "
"``$TVM_HOME/build-microtvm-zephyr`` 目录下。您可以通过重新配置虚拟机（在之前运行 ``vagrant up`` "
"命令的目录下运行 ``vagrant provision`` ），又或者自己手动重新构建TVM。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:111
msgid ""
"Remember: the TVM ``.so`` built inside the VM is different from the one you "
"may use on your host machine. This is why it's built inside the special "
"directory ``build-microtvm-zephyr``."
msgstr ""
"请注意：在microTVM虚拟机中的TVM构建文件 ``.so`` 与您主机上的构建文件是不同的。这也是为什么要将构建文件放置在 ``build-"
"microtvm-zephyr`` 这个特殊目录下。"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:115
msgid "Logging in to the VM"
msgstr "登录虚拟机"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:117
msgid ""
"The VM should be available to your host only with the hostname ``microtvm``."
" You can SSH to the VM as follows:"
msgstr "虚拟机应该向主机提供唯一的主机名 ``microtvm`` 。您可以通过SSH登录到虚拟机："

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:124
msgid ""
"Then ``cd`` to the same path used on your host machine for TVM. For example,"
" on Mac:"
msgstr "然后 ``cd`` 到主机上访问TVM的相同路径。例如，在 Mac 上："

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:131
msgid "Running tests"
msgstr "测试"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:133
msgid "Once the VM has been provisioned, tests can executed using ``poetry``:"
msgstr "当microTVM虚拟机完成配置工作，您可以使用 ``poetry`` 运行测试用例："

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:140
msgid ""
"If you do not have physical hardware attached, but wish to run the tests "
"using the local QEMU emulator running within the VM, run the following "
"commands instead:"
msgstr "如果您没有硬件设备，但仍希望运行测试用例，您可以在microTVM虚拟机上运行本地QEMU模拟器，详细命令如下："

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:165
msgid ""
":download:`Download Python source code: micro_reference_vm.py "
"<micro_reference_vm.py>`"
msgstr ""
":download:`下载 Python 源代码: micro_reference_vm.py <micro_reference_vm.py>`"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:171
msgid ""
":download:`Download Jupyter notebook: micro_reference_vm.ipynb "
"<micro_reference_vm.ipynb>`"
msgstr ""
":download:`下载 Jupyter notebook: micro_reference_vm.ipynb "
"<micro_reference_vm.ipynb>`"

#: ../../_staging/how_to/work_with_microtvm/micro_reference_vm.rst:178
msgid ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
