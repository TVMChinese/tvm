# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# HLearning, 2021
# juzi, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1734+gca660ba1e\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-12 10:06+0000\n"
"PO-Revision-Date: 2021-10-13 01:35+0000\n"
"Last-Translator: juzi, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124815/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:4
msgid ""
"Click :ref:`here <sphx_glr_download_how_to_work_with_relay_build_gcn.py>` to"
" download the full example code"
msgstr ""

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:11
msgid "Building a Graph Convolutional Network"
msgstr "构建一个图形卷积网络"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:12
msgid ""
"**Author**: `Yulun Yao <https://yulunyao.io/>`_,             `Chien-Yu Lin "
"<https://homes.cs.washington.edu/~cyulin/>`_"
msgstr ""
"**作者**: `Yulun Yao <https://yulunyao.io/>`_,             `Chien-Yu Lin "
"<https://homes.cs.washington.edu/~cyulin/>`_"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:14
msgid ""
"This article is an introductory tutorial to build a Graph Convolutional "
"Network (GCN) with Relay. In this tutorial, we will run our GCN on Cora "
"dataset to demonstrate. Cora dataset is a common benchmark for Graph Neural "
"Networks (GNN) and frameworks that support GNN training and inference. We "
"directly load the dataset from DGL library to do the apples to apples "
"comparison against DGL."
msgstr ""
"本文是一篇介绍如何使用Relay构建图形卷积网络（GCN）的介绍性教程。在本教程中，我们将在Cora数据集上运行GCN进行演示。Cora数据集是图形神经网络（GNN）和支持GNN训练和推理的框架的通用基准。我们直接从DGL库中加载数据集，对DGL进行同类之间的比较。"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:19
msgid ""
"Please refer to DGL doc for DGL installation at "
"https://docs.dgl.ai/install/index.html."
msgstr "请参阅DGL指南，了解DGL的安装https://docs.dgl.ai/install/index.html."

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:22
msgid ""
"Please refer to PyTorch guide for PyTorch installation at "
"https://pytorch.org/get-started/locally/."
msgstr "请参阅PyTorch指南，了解PyTorch的安装https://pytorch.org/get-started/locally/."

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:26
msgid "Define GCN in DGL with PyTorch backend"
msgstr "使用PyTorch后端在DGL中定义GCN"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:28
msgid ""
"DGL example: https://github.com/dmlc/dgl/tree/master/examples/pytorch/gcn "
"This part reuses the code from the above example."
msgstr ""
"DGL示例：https://github.com/dmlc/dgl/tree/master/examples/pytorch/gcn "
"这一部分重复使用了上述示例中的代码。"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:69
#: ../../_staging/how_to/work_with_relay/build_gcn.rst:154
#: ../../_staging/how_to/work_with_relay/build_gcn.rst:205
#: ../../_staging/how_to/work_with_relay/build_gcn.rst:235
#: ../../_staging/how_to/work_with_relay/build_gcn.rst:494
msgid "Out:"
msgstr "输出:"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:78
msgid "Define the functions to load dataset and evaluate accuracy"
msgstr "定义加载数据集和评估准确性的代码"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:79
msgid ""
"You may substitute this part with your own dataset, here we load data from "
"DGL"
msgstr "您可以用自己的数据集替换此部分，这里我们从DGL加载数据"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:116
msgid "Load the data and set up model parameters"
msgstr "加载数据并设置模型参数"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:176
msgid "Set up the DGL-PyTorch model and get the golden results"
msgstr "建立DGL-PyTorch模型并获得黄金结果"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:178
msgid ""
"The weights are trained with "
"https://github.com/dmlc/dgl/blob/master/examples/pytorch/gcn/train.py"
msgstr ""
"https://github.com/dmlc/dgl/blob/master/examples/pytorch/gcn/train.py 训练权重"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:215
msgid "Run the DGL model and test for accuracy"
msgstr "运行DGL模型并测试其准确性"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:254
msgid "Define Graph Convolution Layer in Relay"
msgstr "定义Relay中的图形卷积"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:255
msgid ""
"To run GCN on TVM, we first need to implement Graph Convolution Layer. You "
"may refer to "
"https://github.com/dmlc/dgl/blob/master/python/dgl/nn/mxnet/conv/graphconv.py"
" for a GraphConv Layer implemented in DGL with MXNet Backend"
msgstr ""
"要在TVM上运行GCN，我们首先需要使图形卷积生效。你可以参考https://github.com/dmlc/dgl/blob/master/python/dgl/nn/mxnet/conv/graphconv.py"
" 此网址使用MXNet后端在DGL中实现图形卷积。"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:258
msgid ""
"The layer is defined with below operations, note that we apply two "
"transposes to keep adjacency matrix on right hand side of sparse_dense "
"operator, this method is temporary and will be updated in next few weeks "
"when we have sparse matrix transpose and support for left sparse operator."
msgstr ""
"该层由以下操作定义，请注意我们应用两个转置将邻接矩阵保留在稀疏_稠密算子的右侧，该方法是临时的，当我们有稀疏矩阵转置并支持左侧稀疏算子时，该方法将在未来几周内更新"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:261
msgid ""
"\\mbox{GraphConv}(A, H, W)   = A * H * W\n"
"                            = ((H * W)^t * A^t)^t\n"
"                            = ((W^t * H^t) * A^t)^t"
msgstr ""
"\\mbox{GraphConv}(A, H, W)   = A * H * W\n"
"                            = ((H * W)^t * A^t)^t\n"
"                            = ((W^t * H^t) * A^t)^t"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:335
msgid "Prepare the parameters needed in the GraphConv layers"
msgstr "准备GraphConv层中所需的参数"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:381
msgid "Put layers together"
msgstr "将层放在一起"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:432
msgid "Compile and run with TVM"
msgstr "使用VTM编译和运行"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:434
msgid "Export the weigths from PyTorch model to Python Dict"
msgstr "将 Pytorch 模型的权重导出成 Python Dict"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:469
msgid "Run the TVM model, test for accuracy and verify with DGL"
msgstr "运行TVM模型，测试精度并使用DGL进行验证"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:526
msgid ":download:`Download Python source code: build_gcn.py <build_gcn.py>`"
msgstr ":download:`下载Python源代码: build_gcn.py <build_gcn.py>`"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:532
msgid ""
":download:`Download Jupyter notebook: build_gcn.ipynb <build_gcn.ipynb>`"
msgstr ":download:`下载Jupyter notebook: build_gcn.ipynb <build_gcn.ipynb>`"

#: ../../_staging/how_to/work_with_relay/build_gcn.rst:539
msgid ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
