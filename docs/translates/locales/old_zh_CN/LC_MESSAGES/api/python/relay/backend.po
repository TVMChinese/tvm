# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1713+gbe5f05f3f\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-18 01:16+0000\n"
"PO-Revision-Date: 2021-09-18 07:40+0000\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124815/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/api/python/relay/backend.rst:19
msgid "tvm.relay.backend"
msgstr ""

#: ../../../python/tvm/relay/backend/__init__.pydocstring of
#: tvm.relay.backend:1
msgid "Backend codegen modules for relay."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter:1
msgid "The Python interface to the Relay reference interpreter."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Executor:1
msgid "An abstract interface for executing Relay programs."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Executor.evaluate:1
msgid "Evaluate a Relay expression on the executor."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Executor.evaluate:0
#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Interpreter:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CCacheKey:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.lower:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.jit:0
#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen.GraphExecutorCodegen.codegen:0
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.compile:0
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.set_params:0
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.lower:0
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.optimize:0
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMExecutor:0
msgid "Parameters"
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Executor.evaluate:3
msgid "The expression to evaluate."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Executor.evaluate:5
msgid "Additional binding of free variable."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Executor.evaluate:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.lower:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.jit:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.items:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.shape_func_items:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.dump:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get:0
#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen.GraphExecutorCodegen.codegen:0
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.compile:0
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.optimize:0
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.get_exec:0
msgid "Returns"
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Executor.evaluate:8
msgid "**val** -- The evaluation result."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Executor.evaluate:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.lower:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.jit:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.items:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.shape_func_items:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.dump:0
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get:0
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.compile:0
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.get_exec:0
msgid "Return type"
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Interpreter:1
msgid "Simple interpreter interface."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Interpreter:3
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMExecutor:8
msgid "The module to support the execution."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Interpreter:5
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMExecutor:10
msgid "The runtime device to run the code on."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Interpreter:7
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMExecutor:12
msgid "The target option to build the function."
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Interpreter:13
msgid ""
"python: executor = relay.create_executor(kind=\"debug\", mod=module) a = "
"executor.evaluate(expr)(args1) b = executor.evaluate(expr)(args2)"
msgstr ""

#: ../../../python/tvm/relay/backend/interpreter.pydocstring of
#: tvm.relay.backend.interpreter.Interpreter:20
msgid ""
"python: func = relay.create_executor(kind=\"debug\", "
"mod=module).evaluate(expr) a = func(args1) b = func(args2)"
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine:1
msgid "Backend code generation engine."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.LoweredOutput:1
msgid "Lowered output"
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CCacheKey:1
msgid "Key in the CompileEngine."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CCacheKey:3
msgid "The source function."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CCacheKey:5
msgid "The target we want to run the function on."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CCacheValue:1
msgid "Value in the CompileEngine, including usage statistics."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_shape:1
msgid "Convert the shape to correct dtype and vars."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:1
msgid "Get all valid implementations from the op strategy."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:3
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:10
msgid "Note that this function doesn't support op with symbolic input shapes."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:5
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:12
msgid "Relay operator."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:7
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:14
msgid "The op attribute."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:9
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:16
msgid "Input tensors to the op."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:11
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:18
msgid "The output type."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:13
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:20
msgid "The target to compile the op."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get_valid_implementations:16
msgid "**ret** -- The list of all valid op implementations."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:1
msgid "Select the best implementation from the op strategy."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:3
msgid ""
"If use_autotvm is True, it'll first try to find the best implementation "
"based on AutoTVM profile results. If no AutoTVM profile result is found, "
"it'll choose the implementation with highest plevel."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:7
msgid ""
"If use_autotvm is False, it'll directly choose the implementation with "
"highest plevel."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:22
msgid "Whether query AutoTVM to pick the best."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.select_implementation:25
msgid ""
"**ret** -- The best op implementation and the corresponding output tensors."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine:1
msgid "CompileEngine to get lowered code."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.lower:1
msgid "Lower a source_func to a CachedFunc."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.lower:3
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.jit:3
msgid "The source relay function."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.lower:5
#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.jit:5
msgid "The target platform."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.lower:8
msgid "**cached_func** -- The result of lowering."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.jit:1
msgid "JIT a source_func to a tvm.runtime.PackedFunc."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.jit:8
msgid "**jited_func** -- The result of jited function."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.clear:1
msgid "clear the existing cached functions"
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.items:1
msgid "List items in the cache."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.items:3
msgid "**item_list** -- The list of items."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.shape_func_items:1
msgid "List items in the shape_func_cache."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.shape_func_items:3
msgid "**item_list** -- The list of shape_func_items."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.dump:1
msgid "Return a string representation of engine dump."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.CompileEngine.dump:3
msgid "**dump** -- The dumped string representation"
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get:1
msgid "Get the global compile engine."
msgstr ""

#: ../../../python/tvm/relay/backend/compile_engine.pydocstring of
#: tvm.relay.backend.compile_engine.get:3
msgid "**engine** -- The compile engine."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen:1
msgid "A compiler from a Relay expression to TVM's graph executor."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen:3
msgid "The compiler is built from a few pieces."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen:5
msgid ""
"First we define a compiler from a single Relay expression to the graph "
"language. We require the expression to be a function. The function's "
"parameters correspond to the placeholder/inputs and model parameters found "
"in the computation graph representation. The body of the function represents"
" the computation graph."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen:11
msgid ""
"The compiler's output is a program in the graph language, which is composed "
"of Node, NodeRef, InputNode, OpNode. This \"little language\" represents "
"programs in TVM's graph format."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen:15
msgid ""
"To connect to the graph executor, we use a printer that converts our graph "
"format into TVM's JSON format. The resulting string can be loaded by "
"contrib.graph_executor or any other TVM runtime compatible systems."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen.GraphExecutorCodegen:1
msgid "The compiler from Relay to the TVM runtime system."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen.GraphExecutorCodegen.codegen:1
msgid "Compile a single function into a graph."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen.GraphExecutorCodegen.codegen:3
msgid "The function to compile."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen.GraphExecutorCodegen.codegen:6
msgid ""
"* **graph_json** (*str*) -- The graph json that can be consumed by runtime. "
"* **mod** (*IRModule or Dict[str, IRModule]*) -- The lowered functions. * "
"**params** (*Dict[str, tvm.nd.NDArray]*) -- Additional constant parameters."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen.GraphExecutorCodegen.codegen:6
msgid ""
"**graph_json** (*str*) -- The graph json that can be consumed by runtime."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen.GraphExecutorCodegen.codegen:7
msgid "**mod** (*IRModule or Dict[str, IRModule]*) -- The lowered functions."
msgstr ""

#: ../../../python/tvm/relay/backend/graph_executor_codegen.pydocstring of
#: tvm.relay.backend.graph_executor_codegen.GraphExecutorCodegen.codegen:8
msgid ""
"**params** (*Dict[str, tvm.nd.NDArray]*) -- Additional constant parameters."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of tvm.relay.backend.vm:1
msgid "The Relay Virtual Machine."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of tvm.relay.backend.vm:3
msgid ""
"Implements a Python interface to compiling and executing on the Relay VM."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.compile:1
msgid "Compile the module to VM executable. A helper function for VMCompiler."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.compile:3
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.lower:3
msgid "The Relay module to build."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.compile:5
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.lower:5
msgid ""
"device/context name) to str/tvm.target.Target, optional For heterogeneous "
"compilation, it is a dictionary indicating context to target mapping. For "
"homogeneous compilation, it is a build target."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.compile:9
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.lower:9
msgid ""
"Host compilation target, if target is device. When TVM compiles device "
"specific program such as CUDA, we also need host(CPU) side code to interact "
"with the driver to setup the dimensions and parameters correctly. "
"target_host is used to specify the host side codegen target. By default, "
"llvm is used if it is enabled, otherwise a stackvm intepreter is used."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.compile:17
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.set_params:3
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.optimize:11
msgid ""
"Input parameters to the graph that do not change during inference time. Used"
" for constant folding."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.compile:21
#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.get_exec:3
msgid ""
"**exec** -- The VM executable that contains both library code and bytecode."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler:1
msgid "Compiler that compiles Relay module to VM executable."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.set_params:1
msgid "Set constant parameters for the model."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.get_params:1
msgid "Return the updated weights."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.lower:1
msgid "Lower the module to VM bytecode."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.codegen:1
msgid "Generate the kernel library."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.optimize:1
msgid "Helper method that optimizes a Relay module via VM."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.optimize:5
msgid "device/context name) to str/tvm.target.Target, optional"
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.optimize:7
msgid ""
"The compilation target for host. By default, llvm is used if it is enabled, "
"otherwise a stackvm intepreter is used."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.optimize:15
msgid ""
"* **mod** (*tvm.IRModule*) -- The optimized relay module. * **params** "
"(*dict*) -- The parameters of the final module."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.optimize:15
msgid "**mod** (*tvm.IRModule*) -- The optimized relay module."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.optimize:16
msgid "**params** (*dict*) -- The parameters of the final module."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMCompiler.get_exec:1
msgid "Get the VM executable."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMExecutor:1
msgid "An implementation of the executor interface for the Relay VM."
msgstr ""

#: ../../../python/tvm/relay/backend/vm.pydocstring of
#: tvm.relay.backend.vm.VMExecutor:4
msgid ""
"Useful interface for experimentation and debugging the VM can also be used "
"directly from the API. supported by `tvm.runtime.vm`."
msgstr ""
