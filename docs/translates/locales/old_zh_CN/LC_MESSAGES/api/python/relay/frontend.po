# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Xiaoyu Zhang, 2021
# JiaKui Hu, 2021
# a_flying_fish <a_flying_fish@outlook.com>, 2021
# HLearning, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1713+gbe5f05f3f\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-18 01:16+0000\n"
"PO-Revision-Date: 2021-09-18 07:40+0000\n"
"Last-Translator: HLearning, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124815/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/api/python/relay/frontend.rst:20
msgid "tvm.relay.frontend"
msgstr "tvm.relay.frontend"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1
msgid "Frontends for constructing Relay programs."
msgstr "用于构建 Relay 程序的前端。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:3
msgid "Contains the model importers currently defined for Relay."
msgstr "包含当前为 Relay 定义的模型导入器。 "

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1
msgid "**Functions:**"
msgstr "**函数：**"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`from_mxnet <tvm.relay.frontend.from_mxnet>`\\ \\(symbol\\[\\, shape\\,"
" dtype\\, ...\\]\\)"
msgstr ""
":obj:`from_mxnet <tvm.relay.frontend.from_mxnet>`\\ \\(symbol\\[\\, shape\\,"
" dtype\\, ...\\]\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:1
msgid "Convert from MXNet\"s model into compatible relay Function."
msgstr "将 MXNet 的模型转换为兼容的relay Function。 "

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`quantize_conv_bias_mkldnn_from_var "
"<tvm.relay.frontend.quantize_conv_bias_mkldnn_from_var>`\\ \\(bias\\_var\\, "
"...\\)"
msgstr ""
":obj:`quantize_conv_bias_mkldnn_from_var "
"<tvm.relay.frontend.quantize_conv_bias_mkldnn_from_var>`\\ \\(bias\\_var\\, "
"...\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet_qnn_op_utils.quantize_conv_bias_mkldnn_from_var:1
msgid "Quantized conv2d bias"
msgstr "量化的conv2d偏置"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`from_keras <tvm.relay.frontend.from_keras>`\\ \\(model\\[\\, shape\\, "
"layout\\]\\)"
msgstr ""
":obj:`from_keras <tvm.relay.frontend.from_keras>`\\ \\(model\\[\\, shape\\, "
"layout\\]\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.keras.from_keras:1
msgid "Convert keras model to relay Function."
msgstr "将Keras模型转换为对应的relay Function。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`from_onnx <tvm.relay.frontend.from_onnx>`\\ \\(model\\[\\, shape\\, "
"dtype\\, opset\\, ...\\]\\)"
msgstr ""
":obj:`from_onnx <tvm.relay.frontend.from_onnx>`\\ \\(model\\[\\, shape\\, "
"dtype\\, opset\\, ...\\]\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:1
msgid "Convert a ONNX model into an equivalent Relay Function."
msgstr "将一个ONNX模型转化为一个等价的Relay Function。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`from_tflite <tvm.relay.frontend.from_tflite>`\\ \\(model\\[\\, "
"shape\\_dict\\, dtype\\_dict\\]\\)"
msgstr ""
":obj:`from_tflite <tvm.relay.frontend.from_tflite>`\\ \\(model\\[\\, "
"shape\\_dict\\, dtype\\_dict\\]\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tflite.from_tflite:1
msgid "Convert from tflite model into compatible relay Function."
msgstr "将 tflite 的模型转换为对应的 relay Function。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ":obj:`from_coreml <tvm.relay.frontend.from_coreml>`\\ \\(model\\[\\, shape\\]\\)"
msgstr ":obj:`from_coreml <tvm.relay.frontend.from_coreml>`\\ \\(model\\[\\, shape\\]\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.coreml.from_coreml:1
msgid "Convert from coreml model into Relay Function."
msgstr "将coreml模型转换为对应的relay Function。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`from_caffe2 <tvm.relay.frontend.from_caffe2>`\\ \\(init\\_net\\, "
"predict\\_net\\[\\, shape\\, ...\\]\\)"
msgstr ""
":obj:`from_caffe2 <tvm.relay.frontend.from_caffe2>`\\ \\(init\\_net\\, "
"predict\\_net\\[\\, shape\\, ...\\]\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe2.from_caffe2:1
msgid ""
"Load caffe2 graph which contains init_net and predict_net into Relay "
"Function."
msgstr "将包含init_net和predict_net的caffe2模型转换为Relay Function。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`from_tensorflow <tvm.relay.frontend.from_tensorflow>`\\ \\(graph\\[\\,"
" layout\\, shape\\, ...\\]\\)"
msgstr ""
":obj:`from_tensorflow <tvm.relay.frontend.from_tensorflow>`\\ \\(graph\\[\\,"
" layout\\, shape\\, ...\\]\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
"Load tensorflow graph which is a python tensorflow graph object into relay."
msgstr "加载一个从python tensorflow计算图转换而来的relay。模型配套的参数将被自动处理。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`from_darknet <tvm.relay.frontend.from_darknet>`\\ \\(net\\[\\, "
"shape\\, dtype\\]\\)"
msgstr ""
":obj:`from_darknet <tvm.relay.frontend.from_darknet>`\\ \\(net\\[\\, "
"shape\\, dtype\\]\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.darknet.from_darknet:1
msgid "Convert from Darknet's model into compatible relay Function."
msgstr "将Darknet模型转换为对应的relay Function。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`from_pytorch <tvm.relay.frontend.from_pytorch>`\\ "
"\\(script\\_module\\, input\\_infos\\[\\, ...\\]\\)"
msgstr ""
":obj:`from_pytorch <tvm.relay.frontend.from_pytorch>`\\ "
"\\(script\\_module\\, input\\_infos\\[\\, ...\\]\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
"Load PyTorch model in the form of a scripted PyTorch model and convert into "
"relay."
msgstr "使用torchsrcipt形式加载PyTorch模型，并将其转换为对应的relay。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`from_caffe <tvm.relay.frontend.from_caffe>`\\ \\(init\\_net\\, "
"predict\\_net\\, ...\\)"
msgstr ""
":obj:`from_caffe <tvm.relay.frontend.from_caffe>`\\ \\(init\\_net\\, "
"predict\\_net\\, ...\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe.from_caffe:1
msgid "Convert from caffe model into compatible relay Function."
msgstr "将caffe模型转换为对应的relay Function。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
msgid ""
":obj:`from_paddle <tvm.relay.frontend.from_paddle>`\\ "
"\\(program\\_or\\_layer\\[\\, shape\\_dict\\, ...\\]\\)"
msgstr ""
":obj:`from_paddle <tvm.relay.frontend.from_paddle>`\\ "
"\\(program\\_or\\_layer\\[\\, shape\\_dict\\, ...\\]\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.paddlepaddle.from_paddle:1
msgid "Convert a PaddlePaddle model into an equivalent Relay Function."
msgstr "将PaddlePaddle模型转换为对应的Relay Function。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend:1
msgid "**Classes:**"
msgstr "**类：**"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:1:<autosummary>:1
msgid ":obj:`ChangeDatatype <tvm.relay.frontend.ChangeDatatype>`\\ \\(src\\, dst\\)"
msgstr ":obj:`ChangeDatatype <tvm.relay.frontend.ChangeDatatype>`\\ \\(src\\, dst\\)"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:1:<autosummary>:1
#: ../../../python/tvm/relay/frontend/change_datatype.pydocstring of
#: tvm.relay.frontend.change_datatype._wrap_class_function_pass.<locals>.PyFunctionPass:1
msgid "Mutator for changing the datatype of Relay programs."
msgstr "需要改变Relay中数据类型时的应变手段。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.keras.from_keras:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tflite.from_tflite:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.coreml.from_coreml:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe2.from_caffe2:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.darknet.from_darknet:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.pytorch.from_pytorch:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe.from_caffe:0
#: ../../../python/tvm/relay/frontend/change_datatype.pydocstring of
#: tvm.relay.frontend.change_datatype._wrap_class_function_pass.<locals>.PyFunctionPass:0
msgid "Parameters"
msgstr "参数"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:3
msgid "MXNet symbol."
msgstr "MXNet模型标志。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:5
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:19
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe2.from_caffe2:7
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.darknet.from_darknet:5
msgid "The input shape to the graph"
msgstr "计算图输入节点的数据形状"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:7
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:21
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe2.from_caffe2:9
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.darknet.from_darknet:7
msgid "The input types to the graph"
msgstr "计算图输入节点的数据类型"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:9
msgid "The argument parameters in mxnet"
msgstr "mxnet中的模型参数"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:11
msgid "The auxiliary parameters in mxnet"
msgstr "mxnet中的辅助参数"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.keras.from_keras:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tflite.from_tflite:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.coreml.from_coreml:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe2.from_caffe2:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.darknet.from_darknet:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.pytorch.from_pytorch:0
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe.from_caffe:0
#: ../../../python/tvm/relay/frontend/change_datatype.pydocstring of
#: tvm.relay.frontend.change_datatype._wrap_class_function_pass.<locals>.PyFunctionPass:0
msgid "Returns"
msgstr "返回"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:14
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module for compilation * **params** "
"(*dict of str to tvm.nd.NDArray*) -- The parameter dict to be used by nnvm"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:14
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:39
msgid "**mod** (*tvm.IRModule*) -- The relay module for compilation"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.mxnet.from_mxnet:15
msgid ""
"**params** (*dict of str to tvm.nd.NDArray*) -- The parameter dict to be "
"used by nnvm"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.keras.from_keras:3
msgid "The keras model to be converted."
msgstr "将要被转换的keras模型。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.keras.from_keras:5
msgid "Input shapes of the model, optional"
msgstr "模型输入节点的数据形状，可选"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.keras.from_keras:7
msgid ""
"One of 'NCHW' or 'NHWC', indicates how data should be arranged in the output"
" model. Default layout is 'NCHW' as it in general performs better across "
"TVM."
msgstr "\"NCHW\" 或 \"NHWC\"之一，表示数据在输出模型中应如何排列。默认布局是'NCHW'，因为一般来说，它在TVM中表现得更好。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.keras.from_keras:12
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.coreml.from_coreml:7
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module for compilation. * **params**"
" (*dict of str to tvm.nd.NDArray*) -- The parameter dict to be used by "
"Relay."
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.keras.from_keras:12
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tflite.from_tflite:9
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.coreml.from_coreml:7
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.darknet.from_darknet:10
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe.from_caffe:12
msgid "**mod** (*tvm.IRModule*) -- The relay module for compilation."
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.keras.from_keras:13
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.coreml.from_coreml:8
msgid ""
"**params** (*dict of str to tvm.nd.NDArray*) -- The parameter dict to be "
"used by Relay."
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:3
msgid ""
"ONNX graphs are represented as Python Protobuf objects. The companion "
"parameters will be handled automatically. However, the input names from onnx"
" graph is vague, mixing inputs and network weights/bias such as \"1\", "
"\"2\"... For convenience, we rename the `real` input names to \"input_0\", "
"\"input_1\"... And renaming parameters to \"param_0\", \"param_1\"..."
msgstr ""
"被解析为 Python Protobuf 对象的ONNX "
"计算图。模型配套的参数将被自动处理。然而，来自ONNX计算图的输入名称是模糊的，混合了输入和网络权重/偏置，如 \"1\"、\"2\"... "
"为方便起见，我们将 \"真实\" 的输入名称重命名为 \"input_0\", \"input_1\"... 并将参数重命名为 "
"\"param_0\"、\"param_1\"..."

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:10
msgid ""
"By default, ONNX defines models in terms of dynamic shapes. The ONNX "
"importer retains that dynamism upon import, and the compiler attempts to "
"convert the model into a static shapes at compile time. If this fails, there"
" may still be dynamic operations in the model. Not all TVM kernels currently"
" support dynamic shapes, please file an issue on discuss.tvm.apache.org if "
"you hit an error with dynamic kernels."
msgstr ""
"默认情况下，ONNX 以动态图的方式定义模型。ONNX "
"导入器在导入时保留了这种动态性，而编译器则试图在编译时将模型转换为静态形状。如果转换失败，则代表模型中可能仍有动态操作。目前并非所有的TVM内核都支持动态形状，如果你在使用动态内核时遇到错误，请在discussion.tvm.apache.org上提交问题。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:17
msgid "ONNX ModelProto after ONNX v1.1.0"
msgstr "ONNX v1.1.0之后的ONNX ModelProto"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:23
msgid "Override to autodetected opset. This can be helpful for some testing."
msgstr "自定义优化等级，并覆盖掉程序自动检测的优化等级结果。这对一些测试是有帮助的。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:26
msgid ""
"If this parameter is true, the importer will take any provided onnx input "
"values (weights, shapes, etc) and embed them into the relay model as "
"Constants instead of variables. This allows more aggressive optimizations at"
" compile time and helps in making models static if certain inputs represent "
"attributes relay would traditionally consider compile-time constants."
msgstr ""
"如果这个参数为True，转换脚本将接受所有被用户提供的onnx输入值（权重、形状等），并将它们定义为常量而不是变量、嵌入到relay中。如果某些输入能在编译时被relay认为是常量，那么就可以用这个方法，这将使得模型在转换时得到更深层次的优化"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:32
msgid ""
"Default config:     use_nt_batch_matmul : bool = True         True to "
"convert qualified onnx `matmul` to `nn.batch_matmul` strict to NT format"
"         (transpose_a=False, transpose_b=True)."
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:35
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:19
msgid "Default config:"
msgstr "默认的配置："

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:35
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:19
msgid "use_nt_batch_matmul"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnxNone
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflowNone
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflowNone
msgid "bool = True"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:35
msgid ""
"True to convert qualified onnx `matmul` to `nn.batch_matmul` strict to NT "
"format (transpose_a=False, transpose_b=True)."
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:39
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module for compilation * **params** "
"(*dict of str to tvm.nd.NDArray*) -- The parameter dict to be used by relay"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.onnx.from_onnx:40
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tflite.from_tflite:10
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.darknet.from_darknet:11
msgid ""
"**params** (*dict of str to tvm.nd.NDArray*) -- The parameter dict to be "
"used by relay"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tflite.from_tflite:3
msgid "tflite.Model or tflite.Model.Model (depending on tflite version)"
msgstr "tflite.Model or tflite.Model.Model （由所使用的tflite版本决定）"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tflite.from_tflite:4
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe.from_caffe:7
msgid "Input shapes of the model."
msgstr "模型输入节点的数据形状。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tflite.from_tflite:6
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe.from_caffe:9
msgid "Input types of the model."
msgstr "模型输入节点的数据类型。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tflite.from_tflite:9
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.darknet.from_darknet:10
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module for compilation. * **params**"
" (*dict of str to tvm.nd.NDArray*) -- The parameter dict to be used by relay"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.coreml.from_coreml:3
msgid "coremltools.models.MLModel of a NeuralNetworkClassifier"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.coreml.from_coreml:4
msgid "The input shapes"
msgstr "输入节点大小"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe2.from_caffe2:3
msgid "Caffe2 NetDef containing the weights"
msgstr "包含权重的Caffe2 NetDef"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe2.from_caffe2:5
msgid "Caffe2 NetDef containing the graph"
msgstr "包含计算图的Caffe2 NetDef"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe2.from_caffe2:12
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:23
msgid ""
"* **mod** (*tvm.IRModule*) -- The module that optimizations will be "
"performed on. * **params** (*dict of str to tvm.nd.NDArray*) -- Dict of "
"converted parameters stored in tvm.nd.NDArray format"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe2.from_caffe2:12
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:23
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.pytorch.from_pytorch:19
msgid ""
"**mod** (*tvm.IRModule*) -- The module that optimizations will be performed "
"on."
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe2.from_caffe2:13
#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:24
msgid ""
"**params** (*dict of str to tvm.nd.NDArray*) -- Dict of converted parameters"
" stored in tvm.nd.NDArray format"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:1
msgid ""
"Load tensorflow graph which is a python tensorflow graph object into relay. "
"The companion parameters will be handled automatically."
msgstr "加载一个从python tensorflow计算图转换而来的relay。模型配套的参数将被自动处理。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:4
msgid "Tensorflow GraphDef"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:6
msgid "NCHW only supported now to enable NHWC models on GPU."
msgstr "现在该参数仅支持NCHW，以便在GPU上启用NHWC模式。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:8
msgid "Graph level input shape dictionary."
msgstr "由计算图的输入节点形状组成的字典。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:10
msgid "if not specified then the last node is assumed as graph output."
msgstr "如果该参数没有被指定，那么输入计算图的最后一个节点将被假定为图的输出。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:12
msgid ""
"Default config:     use_dense : bool = True         Ture to convert "
"`tf.matmul` to `nn.dense`, else to `nn.matmul`.         The `nn.dense` op "
"requires the data tensor to be non-transposed and weight tensor         to "
"be transposed, may insert extra `transpose` to the original graph.     "
"use_nt_batch_matmul : bool = True         True to convert `tf.batch_matmul` "
"to `nn.batch_matmul` strict to NT format         (transpose_a=False, "
"transpose_b=True)."
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:16
msgid "use_dense"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:15
msgid ""
"Ture to convert `tf.matmul` to `nn.dense`, else to `nn.matmul`. The "
"`nn.dense` op requires the data tensor to be non-transposed and weight "
"tensor to be transposed, may insert extra `transpose` to the original graph."
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.tensorflow.from_tensorflow:19
msgid ""
"True to convert `tf.batch_matmul` to `nn.batch_matmul` strict to NT format "
"(transpose_a=False, transpose_b=True)."
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.darknet.from_darknet:3
msgid "Darknet net structure."
msgstr "Darknet的网络结构。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.pytorch.from_pytorch:1
msgid ""
"Load PyTorch model in the form of a scripted PyTorch model and convert into "
"relay. The companion parameters will be handled automatically."
msgstr "使用torchscipt形式加载PyTrch模型，并将其转换为对应的relay。模型配套的参数将被自动处理。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.pytorch.from_pytorch:4
msgid ""
"TorchScripted PyTorch graph Note: We currently only support traces (ie: "
"torch.jit.trace(model, input))"
msgstr ""
"基于TorchScripted的Pytorch计算图。注意：我们目前仅支持少许功能（如：torch.jit.trace(model, input)）。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.pytorch.from_pytorch:7
msgid ""
"Can be (input name, input shape) or (input name, (input shape, input types))"
" Graph level input shape and type list The same input names need to be used "
"for deployment, so choose easy to remember names (such as: input0, input1) "
"e.g. [('input0', (1, 2)), ('input1', (3, 4))] or [('input0', ((1, 2), "
"'int')), ('input1', ((3, 4), 'float'))]"
msgstr ""
"它的样式可以是由[输入名称，(输入形状)]或[输入名称, (输入形状, "
"输入类型)]组成的列表或元组，代表计算图的输入形状和类型列表。在转换时需要使用相同的输入节点名称，因此请使用容易记忆的名称（如：input0，input1）。例如：[('input0',"
" (1, 2)), ('input1', (3, 4))] 或 [('input0', ((1, 2), 'int'), ('input1', ((3,"
" 4), 'float')]。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.pytorch.from_pytorch:16
msgid "A custom op conversion map in the same format as _convert_map above"
msgstr "一个与上述_convert_map具有相同格式的自定义算子转换图。"

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.pytorch.from_pytorch:19
msgid ""
"* **mod** (*tvm.IRModule*) -- The module that optimizations will be "
"performed on. * **params** (*dict of str to tvm.runtime.NDArray*) -- Dict of"
" converted parameters stored in tvm.runtime.ndarray format"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.pytorch.from_pytorch:20
msgid ""
"**params** (*dict of str to tvm.runtime.NDArray*) -- Dict of converted "
"parameters stored in tvm.runtime.ndarray format"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe.from_caffe:3
msgid "caffemodel"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe.from_caffe:5
msgid "caffe prototxt"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe.from_caffe:12
msgid ""
"* **mod** (*tvm.IRModule*) -- The relay module for compilation. * **params**"
" (*dict of str to tvm.NDArray*) -- The parameter dict to be used by relay"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.caffe.from_caffe:13
msgid ""
"**params** (*dict of str to tvm.NDArray*) -- The parameter dict to be used "
"by relay"
msgstr ""

#: ../../../python/tvm/relay/frontend/__init__.pydocstring of
#: tvm.relay.frontend.paddlepaddle.from_paddle:3
msgid ""
"PaddlePaddle Program/TranslatedLayer represent the computation graph of "
"PaddlePaddle model, and PaddlePaddle scope stores all the weights of "
"PaddlePaddle model."
msgstr ""
"在PaddlePaddle中，Program或者TranslatedLayer代表PaddlePaddle模型的计算图，PaddlePaddle "
"scope用来存储PaddlePaddle模型的所有权重。"

#: ../../../python/tvm/relay/frontend/change_datatype.pydocstring of
#: tvm.relay.frontend.change_datatype._wrap_class_function_pass.<locals>.PyFunctionPass:3
msgid ""
"This pass should be useful for users of the Bring Your Own Datatypes "
"framework. TODO(@gussmith23 @hypercubestart) Add link to documentation when "
"it exists"
msgstr ""

#: ../../../python/tvm/relay/frontend/change_datatype.pydocstring of
#: tvm.relay.frontend.change_datatype._wrap_class_function_pass.<locals>.PyFunctionPass:7
msgid "Example:"
msgstr "举例："

#: ../../../python/tvm/relay/frontend/change_datatype.pydocstring of
#: tvm.relay.frontend.change_datatype._wrap_class_function_pass.<locals>.PyFunctionPass:21
msgid ""
"The source datatype name, e.g. \"float\" or \"posites2\" (but not "
"\"float32\" or \"custom[posites2]32\")."
msgstr "原始数据类型名称，例如 \"float \"或 \"posites2\"（但不是 \"float32 \" 或  \"custom[posites2]32\"）。"

#: ../../../python/tvm/relay/frontend/change_datatype.pydocstring of
#: tvm.relay.frontend.change_datatype._wrap_class_function_pass.<locals>.PyFunctionPass:24
msgid "The destination datatype name, in the same format."
msgstr "转换后数据类型名称，格式相同。"

#: ../../../python/tvm/relay/frontend/change_datatype.pydocstring of
#: tvm.relay.frontend.change_datatype._wrap_class_function_pass.<locals>.PyFunctionPass:27
msgid ""
"**mod** -- Module where all nodes of dtype `src` have been changed to have "
"dtype `dst`."
msgstr ""

#: ../../../python/tvm/relay/frontend/change_datatype.pydocstring of
#: tvm.relay.frontend.change_datatype._wrap_class_function_pass.<locals>.PyFunctionPass:0
msgid "Return type"
msgstr "返回的数据类型"
