# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1713+gbe5f05f3f\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-18 01:16+0000\n"
"PO-Revision-Date: 2021-09-18 07:43+0000\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124815/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/dev/microtvm_design.rst:18
msgid "microTVM Design Document"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:21
msgid "Table of Contents"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:24
msgid "Background"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:26
msgid ""
"TVM is a model deployment framework that has demonstrated good performance "
"across a wide range of models on traditional operating systems. Given TVM's "
"layered approach to compilation, it is a natural extension to target bare "
"metal devices. While most of the compilation flow does not need to change "
"for a proof-of-concept implementation on such devices, the runtime cannot "
"depend on:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:31
msgid ""
"**Virtual Memory**, and by extension any system-provided ``malloc``. "
"Additionally, bare metal devices typically have very limited memory "
"(measured in KB). Because of this, libraries designed for such platforms "
"typically need to be more judicious in using memory, and need to release "
"memory when it is not in use."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:35
msgid ""
"Traditional OS abstractions, such as **files**, **libraries**, and **kernel "
"functions**. Some projects implement support for these, but they are by no "
"means standard."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:37
msgid "Support for programming languages other than **C**."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:39
msgid ""
"Such changes require a different approach from the TVM C++ runtime typically"
" used on traditional Operating Systems."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:43
msgid "Typical Use"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:45
msgid ""
"This section discusses our vision of the \"typical\" microTVM use case. Each"
" component used to achieve this typical use case is intended to be designed "
"for flexibility, but this unifying vision serves to motivate the inclusion "
"of each part of the design."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:53
msgid "The parts of this process are described below:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:55
msgid ""
"**Model Import**. The user imports an existing model or describes a new "
"model to TVM, producing a *Relay module*."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:58
msgid ""
"**Model Transformations**. The user can apply transformations, such as "
"quantization, to the model. After each transformation, the user should still"
" have a Relay module."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:61
msgid ""
"**Compilation** (Scheduling and Code Generation). TVM implements each "
"operator into Tensor IR by assigning a schedule and schedule configuration "
"to each Relay operator. Then, code (C source or compiled object) is "
"generated for each operator."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:65
msgid ""
"**Integration**. The generated code is integrated along with the TVM C "
"Runtime library into a user-supplied binary project. In some cases (such as "
"when the project is standardized across multiple SoC/development boards), "
"this process is handled automatically."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:69
msgid ""
"**Deployment**. The project is built and the residual firmware binary is "
"flashed onto the device. Model inference is driven either by TVM using an "
"on-device RPC server, or on the device using the on-device Graph Executor."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:74
msgid "Design Goals"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:76
msgid "microTVM aims to achieve these design goals:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:78
msgid ""
"**Portable Code**. microTVM can translate any Relay model into C code that "
"can compile with only a C standard library."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:80
msgid ""
"**Minimal Overhead**. microTVM generates target-specific, highly optimized "
"code. As much overhead from the runtime should be removed."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:82
msgid ""
"**Accessible Code**. microTVM considers C source code as a first-class "
"output mechanism so that it is easier for a firmware engineer to understand "
"and tweak."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:86
msgid "Overview"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:88
msgid ""
"microTVM requires changes at all levels of the TVM compiler stack. The "
"following sub-sections enumerate these changes at a high level, and follow-"
"on sections discuss the specifics in more detail."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:92
msgid "Modeling Target Platforms"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:94
msgid ""
"TVM's search-based optimization approach allows it to largely avoid system-"
"level modeling of targets in favor of experimental results. However, some "
"modeling is necessary in order to ensure TVM is comparing apples-to-apples "
"search results, and to avoid wasting time during the search by attempting to"
" compile invalid code for a target."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:99
msgid "microTVM models these parts of the target:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:101
msgid "The CPU used, through the ``-mcpu`` and ``-march`` target flags."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:102
msgid ""
"The presence or absence of accelerators, through the device components of "
"the target (Currently only the absence of accelerators can be expressed, but"
" this mechanism should extend well)."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:105
msgid "microTVM aims to model these parts of the target in the future:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:107
msgid ""
"Memory, modeled as a set of disjoint memory spaces, each with a label and "
"size and prefetch/flush behavior. Some memory may be shared with "
"accelerators."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:109
msgid ""
"Target runtime configuration (i.e. clock tree configuration, clock speed, "
"etc). This is intended only to contribute to the AutoTVM schedule key and "
"not for any other use."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:112
msgid "At this time, TVM does not intend to model:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:114
msgid ""
"Size, type, or relationship of caches, with the exception of prefetching or "
"cache flushing."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:118
msgid "TVM Targets for microTVM"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:120
msgid ""
"A central data structure in the compilation process is the "
"``tvm::target::Target`` class. TVM uses Target to decide which TIR schedules"
" to enable and how to configure the code generator. The Target class should "
"also uniquely identify the generated code for a particular operator, as "
"autotuning logs use it to rank measured performance (but see Future Work)."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:125
msgid ""
"Targets are currently represented as strings structured similarly to "
"command-line arguments. An example target is shown below:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:128
msgid ""
"``c -keys=arm_cpu -mcpu=cortex-m7 -link-params -model=stm32f746xx -runtime=c"
" -system-lib=1``"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:130
msgid "The relevant parts to microTVM are:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:132
msgid "Code generator (``llvm`` or ``c``)"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:133
msgid ""
"``-mcpu=cortex-m7``: used by TOPI to enable Cortex-M schedules, and, when "
"the C source code generator is selected, included in the output as a comment"
" to help identify the code and configure the downstream C compiler."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:136
msgid ""
"``-link-params``: include parameters as global constants to load from flash."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:137
msgid ""
"``-runtime=c``: build glue code to allow operators to work with the C "
"runtime"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:138
msgid ""
"``-system-lib=1``: emit a system library (i.e. which can be loaded by "
"calling the PackedFunc ``runtime.SystemLib``."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:142
msgid "Writing Schedules for microTVM"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:144
msgid ""
"For operations scheduled on the CPU, microTVM initially plans to make use of"
" specialized instructions and extern (i.e. hand-optimized) functions to "
"achieve good performance. In TVM, this approach is generally accomplished "
"through tensorization, in which TVM breaks a computation into small pieces, "
"and a TIR extern function accelerates each small piece."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:149
msgid ""
"TVM currently accommodates both approaches using ``tir.call_extern``. First,"
" a pragma is attached to the schedule defining the extern function in "
"portable C."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:152
msgid ""
"``sched[output].pragma(n, \"import_c\", \"void call_asm(int32_t* a, int32_t*"
" b) { /* ... */ }\")``"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:154
msgid "Next, ``tensorize`` is used to split the computation."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:156
msgid "``sched[output].tensorize(owi, gemm)``"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:158
msgid ""
"There are a couple of caveats to this approach, all which could be resolved "
"by linking generated code against external libraries:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:161
msgid ""
"Inline assembly is compiler-specific. While Clang and GCC have standardized "
"on one syntax, this may not be portable to other compilers. SDKs solve this "
"by conditionally including a header file depending on the compiler being "
"used. However, taking this approach means that the generated code needs "
"additional compiler flags (i.e. ``-Isystempath/to/header``)."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:165
msgid ""
"It may be helpful to reference helper functions from the generated code "
"(e.g. to inline common sequences of hand-optimized assembly)."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:167
msgid ""
"Finally, the extern function invoked may be wholly written in an external "
"library. If those functions can be wholly inlined, this caveat is the same "
"as the previous. If not, then additional C code needs to be compiled and "
"linked against the operator."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:171
msgid ""
"At present, microTVM presumes that all eligible schedules can be compiled. "
"This means that the user- supplied project (see next section) must include "
"all libraries that are used by the generated code. When not using "
"autotuning, TVM randomly chooses a fallback schedule, so all libraries would"
" need to be supported. When using autotuning, TVM selects the best-"
"performing schedule, so only that library is needed. There isn't currently a"
" way to force TVM to pick a particular schedule outside of autotuning logs, "
"but that would be a good addition."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:178
msgid ""
"Finally, when using the ``llvm`` backend, the process is similar except that"
" LLVM bitcode is included in the generated code (with an ``import_llvm`` "
"pragma). LLVM bitcode provides a portable way to call inline assembly. "
"However, it may be more complex to call external C functions, and helper "
"functions are of course not easy to use from LLVM bitcode."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:184
msgid "Executing Models"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:186
msgid "The TVM compiler traditionally outputs three pieces:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:188
msgid "Model operator implementations, as discussed above;"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:189
msgid "A model execution graph, encoded as JSON; and"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:190
msgid "Simplified parameters."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:192
msgid ""
"To correctly execute the model, a Graph Executor needs to reconstruct the "
"graph in memory, load the parameters, and then invoke the operator "
"implementations in the correct order."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:195
msgid "microTVM supports two ways to do this:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:197
msgid ""
"**Host-Driven**. The Graph Executor can run on the host and carry out "
"execution by issuing commands to the device using an RPC link with a UART-"
"like transport."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:199
msgid ""
"**Standalone**. A C Graph Executor is available to be compiled on-device, "
"but it is not particularly memory efficient. This way enables standalone "
"execution without any attached host."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:202
msgid ""
"Host-Driven is designed for experimenting with models on-device and, like "
"AutoTVM, uses the RPC server to drive computation on-device. Standalone is "
"intended for deployment."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:206
msgid "Host-Driven Execution"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:208
msgid "In Host-Driven execution, the firmware binary is the following:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:210
msgid "Generated operator implementations from TVM."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:211
msgid "The TVM C runtime."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:212
msgid "SoC-specific initialization."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:213
msgid "The TVM RPC server."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:214
msgid "(optional) Simplified Parameters."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:216
msgid ""
"This firmware image is flashed onto the device and a GraphExecutor instance "
"is created on the host. The GraphExecutor drives execution by sending RPC "
"commands over a UART:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:224
msgid "Standalone Execution"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:226
msgid "In Standalone execution, the GraphExecutor is instantiated on device:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:233
msgid "microTVM Firmware"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:235
msgid ""
"We can now discuss how microTVM firmware should behave. An important task "
"common to both model execution strategies is configuring the SoC to match "
"the way it performs in production. microTVM considers this task project- and"
" SoC-dependent. Whether for AutoTVM, host-driven model inference, or in "
"standalone deployment, the user is expected to supply a project whose main()"
" does the following:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:240
msgid "Configure the SoC to match deployment performance."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:241
msgid "Initialize the TVM C Runtime."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:243
msgid ""
"When configuring for host-driven inference or AutoTVM, the remaining tasks "
"are well-defined:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:245
msgid "Initialize a transport (i.e. a UART) for use with the TVM RPC server."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:246
msgid "Launch the TVM RPC Server."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:248
msgid "When configuring for standalone deployment, the firmware needs to:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:250
msgid ""
"Instantiate the system library by calling the ``runtime.SystemLib`` "
"PackedFunc."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:251
msgid "Instantiate a GraphExecutor passing the system library module."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:252
msgid "Configure parameters and inputs as needed."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:253
msgid "Run the model."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:256
msgid "Parts of a microTVM Binary"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:258
msgid ""
"To summarize, a microTVM firwmare binary image must contain these parts:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:260
msgid "Operator implementations, produced by TVM."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:261
msgid "The TVM C runtime library, supplied by TVM as a static library."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:262
msgid "SoC Initialization, supplied by the user."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:264
msgid "For Host-driven model execution, firmware also needs:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:266
msgid "The TVM RPC Server library."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:268
msgid "For Standalone model execution, firmware also needs:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:270
msgid "The TVM C GraphExecutor library, supplied by TVM as a static library."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:271
msgid "The remaining compiler outputs (Simplified Parameters and Graph JSON)."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:274
msgid "The Automated Build Flow"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:276
msgid ""
"Once code generation is complete, ``tvm.relay.build`` returns a "
"``tvm.runtime.Module`` and the user can save the generated C source or "
"binary object to a ``.c`` or ``.o`` file. From this point, TVM can "
"theoretically step back and the user can compile and run the code "
"separately."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:280
msgid ""
"However, for AutoTVM, TVM needs some automated flow to handle the following "
"tasks:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:282
msgid ""
"Integrate operator implementations, the TVM C Runtime library, and the TVM "
"RPC Server library into the firmware project containing user-supplied SoC "
"Initialization."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:284
msgid "Build the resulting project."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:285
msgid "Program the built firmware onto a (specific) attached device."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:286
msgid ""
"Identify the serial port or other transport to be used by TVM to drive "
"remote execution."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:288
msgid ""
"At present, TVM expects the user to supply an implementation of the "
"``tvm.micro.Compiler``, ``tvm.micro.Flasher``, and ``tvm.micro.Transport`` "
"interfaces. TVM then:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:291
msgid "Builds each piece separately as a library."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:292
msgid "Builds the libraries into a binary firmware image."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:293
msgid "Programs the firmware image onto an attached device."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:294
msgid "Opens a serial port to serve as the RPC server transport."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:296
msgid ""
"This design was chosen to reduce build times for microTVM (the common "
"libraries need to be built only once per candidate operator "
"implemmentation). In practice, these projects are extremely small and "
"compile relatively quickly. Compared with the added complexity of this "
"tighter build integration with TVM, the performance gains are likely not "
"worth it. A future design will consolidate the build tasks into a single "
"step and narrow the interface to provide a better integration."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:303
msgid "Measuring operator performance"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:305
msgid ""
"The TVM C runtime depends on user-supplied functions to measure time on-"
"device. Users should implement ``TVMPlatformTimerStart`` and "
"``TVMPlatformTimerStop``. These functions should measure wall clock time, so"
" there are some pitfalls in implementing these functions:"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:309
msgid ""
"If the CPU could halt or sleep during a computation (i.e. if it is being "
"done on an accelerator), a cycle counter should likely not be used as these "
"tend to stop counting while the CPU is asleep."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:311
msgid ""
"The granularity of these functions can be relaxed as needed to extend the "
"range of the timer device. However, if granularity is too coarse, a sub-"
"optimal schedule may be used."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:313
msgid "An error should be raised if the timer overflows."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:314
msgid ""
"The timer should not interrupt computation unless absolutely necessary. "
"Doing so may affect the accuracy of the results."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:316
msgid ""
"Calibrating the output against a wall clock is ideal, but it will likely be "
"too cumbersome. A future PR could enable some characterization of the "
"platform timer by, e.g., measuring the internal oscillator against a "
"reference such as an external crystal."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:321
msgid "Future Work"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:324
msgid "Ahead-of-Time Runtime"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:326
msgid ""
"A limitation of the Graph Executor is the amount of memory overhead required"
" in parsing the JSON. The current implementation contributes significantly "
"to the dynamic memory usage of microTVM, limiting its utility. An ahead-of-"
"time runtime can avoid the need for any Graph JSON parsing and improve "
"inference speed by generating C code to call the generated operator "
"implementations directly rather than relying on a data-driven approach with "
"the Graph Executor."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:333
msgid "Memory Planning"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:335
msgid ""
"The current memory planner attempts to limit the number of "
"``TVMBackendDeviceAlloc()`` calls issued for intermediate tensors only. "
"Because scratchpads can vary widely, and because the planner coalesces "
"memory allocations within 16x of each other, this strategy typically results"
" in high peak memory usage."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:341
msgid "Heterogeneous Execution"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:343
msgid ""
"Newer Cortex-M SoCs can contain multiple CPUs and onboard ML accelerators."
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:347
msgid "Autotuning Target"
msgstr ""

#: ../../_staging/dev/microtvm_design.rst:349
msgid "As discussed previously,"
msgstr ""
