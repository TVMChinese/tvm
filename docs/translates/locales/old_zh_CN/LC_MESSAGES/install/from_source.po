# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1713+gbe5f05f3f\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-18 01:16+0000\n"
"PO-Revision-Date: 2021-09-18 07:44+0000\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124815/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/install/from_source.rst:21
msgid "Install from Source"
msgstr ""

#: ../../_staging/install/from_source.rst:22
msgid ""
"This page gives instructions on how to build and install the TVM package "
"from scratch on various systems. It consists of two steps:"
msgstr ""

#: ../../_staging/install/from_source.rst:25
msgid ""
"First build the shared library from the C++ codes (`libtvm.so` for linux, "
"`libtvm.dylib` for macOS and `libtvm.dll` for windows)."
msgstr ""

#: ../../_staging/install/from_source.rst:26
msgid "Setup for the language packages (e.g. Python Package)."
msgstr ""

#: ../../_staging/install/from_source.rst:28
msgid ""
"To get started, download tvm source code from the `Download Page "
"<https://tvm.apache.org/download>`_."
msgstr ""

#: ../../_staging/install/from_source.rst:31
msgid "Developers: Get Source from Github"
msgstr ""

#: ../../_staging/install/from_source.rst:32
msgid ""
"You can also choose to clone the source repo from github. It is important to"
" clone the submodules along, with ``--recursive`` option."
msgstr ""

#: ../../_staging/install/from_source.rst:39
msgid ""
"For windows users who use github tools, you can open the git shell, and type"
" the following command."
msgstr ""

#: ../../_staging/install/from_source.rst:50
msgid "Build the Shared Library"
msgstr ""

#: ../../_staging/install/from_source.rst:52
msgid "Our goal is to build the shared libraries:"
msgstr ""

#: ../../_staging/install/from_source.rst:54
msgid "On Linux the target library are `libtvm.so` and `libtvm_runtime.so`"
msgstr ""

#: ../../_staging/install/from_source.rst:55
msgid ""
"On macOS the target library are `libtvm.dylib` and `libtvm_runtime.dylib`"
msgstr ""

#: ../../_staging/install/from_source.rst:56
msgid ""
"On Windows the target library are `libtvm.dll` and `libtvm_runtime.dll`"
msgstr ""

#: ../../_staging/install/from_source.rst:58
msgid ""
"It is also possible to :ref:`build the runtime <deploy-and-integration>` "
"library only."
msgstr ""

#: ../../_staging/install/from_source.rst:60
msgid "The minimal building requirements for the ``TVM`` libraries are:"
msgstr ""

#: ../../_staging/install/from_source.rst:62
msgid "A recent c++ compiler supporting C++ 14 (g++-5 or higher)"
msgstr ""

#: ../../_staging/install/from_source.rst:63
msgid "CMake 3.5 or higher"
msgstr ""

#: ../../_staging/install/from_source.rst:64
msgid "We highly recommend to build with LLVM to enable all the features."
msgstr ""

#: ../../_staging/install/from_source.rst:65
msgid ""
"If you want to use CUDA, CUDA toolkit version >= 8.0 is required. If you are"
" upgrading from an older version, make sure you purge the older version and "
"reboot after installation."
msgstr ""

#: ../../_staging/install/from_source.rst:66
msgid ""
"On macOS, you may want to install `Homebrew <https://brew.sh>`_ to easily "
"install and manage dependencies."
msgstr ""

#: ../../_staging/install/from_source.rst:67
msgid ""
"Python is also required. Avoid using Python 3.9.X+ which is not `supported "
"<https://github.com/apache/tvm/issues/8577>`_. 3.7.X+ and 3.8.X+ should be "
"well supported however."
msgstr ""

#: ../../_staging/install/from_source.rst:69
msgid ""
"To install the these minimal pre-requisites on Ubuntu/Debian like linux "
"operating systems, execute (in a terminal):"
msgstr ""

#: ../../_staging/install/from_source.rst:77
msgid ""
"Use Homebrew to install the required dependencies for macOS running either "
"the Intel or M1 processors. You must follow the post-installation steps "
"specified by Homebrew to ensure the dependencies are correctly installed and"
" configured:"
msgstr ""

#: ../../_staging/install/from_source.rst:87
msgid ""
"We use cmake to build the library. The configuration of TVM can be modified "
"by editing `config.cmake` and/or by passing cmake flags to the command line:"
msgstr ""

#: ../../_staging/install/from_source.rst:91
msgid ""
"First, check the cmake in your system. If you do not have cmake, you can "
"obtain the latest version from `official website "
"<https://cmake.org/download/>`_"
msgstr ""

#: ../../_staging/install/from_source.rst:93
msgid ""
"First create a build directory, copy the ``cmake/config.cmake`` to the "
"directory."
msgstr ""

#: ../../_staging/install/from_source.rst:100
msgid "Edit ``build/config.cmake`` to customize the compilation options"
msgstr ""

#: ../../_staging/install/from_source.rst:102
msgid ""
"On macOS, for some versions of Xcode, you need to add ``-lc++abi`` in the "
"LDFLAGS or you'll get link errors."
msgstr ""

#: ../../_staging/install/from_source.rst:103
msgid ""
"Change ``set(USE_CUDA OFF)`` to ``set(USE_CUDA ON)`` to enable CUDA backend."
" Do the same for other backends and libraries you want to build for (OpenCL,"
" RCOM, METAL, VULKAN, ...)."
msgstr ""

#: ../../_staging/install/from_source.rst:105
msgid ""
"To help with debugging, ensure the embedded graph executor and debugging "
"functions are enabled with ``set(USE_GRAPH_EXECUTOR ON)`` and "
"``set(USE_PROFILER ON)``"
msgstr ""

#: ../../_staging/install/from_source.rst:106
msgid ""
"To debug with IRs, ``set(USE_RELAY_DEBUG ON)`` and set environment variable "
"`TVM_LOG_DEBUG`."
msgstr ""

#: ../../_staging/install/from_source.rst:112
msgid ""
"TVM requires LLVM for for CPU codegen. We highly recommend you to build with"
" the LLVM support on."
msgstr ""

#: ../../_staging/install/from_source.rst:114
msgid ""
"LLVM 4.0 or higher is needed for build with LLVM. Note that version of LLVM "
"from default apt may lower than 4.0."
msgstr ""

#: ../../_staging/install/from_source.rst:115
msgid ""
"Since LLVM takes long time to build from source, you can download pre-built "
"version of LLVM from `LLVM Download Page "
"<http://releases.llvm.org/download.html>`_."
msgstr ""

#: ../../_staging/install/from_source.rst:118
msgid ""
"Unzip to a certain location, modify ``build/config.cmake`` to add "
"``set(USE_LLVM /path/to/your/llvm/bin/llvm-config)``"
msgstr ""

#: ../../_staging/install/from_source.rst:119
msgid ""
"You can also directly set ``set(USE_LLVM ON)`` and let cmake search for a "
"usable version of LLVM."
msgstr ""

#: ../../_staging/install/from_source.rst:121
msgid "You can also use `LLVM Nightly Ubuntu Build <https://apt.llvm.org/>`_"
msgstr ""

#: ../../_staging/install/from_source.rst:123
msgid ""
"Note that apt-package append ``llvm-config`` with version number. For "
"example, set ``set(USE_LLVM llvm-config-10)`` if you installed LLVM 10 "
"package"
msgstr ""

#: ../../_staging/install/from_source.rst:126
msgid "We can then build tvm and related libraries."
msgstr ""

#: ../../_staging/install/from_source.rst:134
msgid ""
"You can also use Ninja build system instead of Unix Makefiles. It can be "
"faster to build than using Makefiles."
msgstr ""

#: ../../_staging/install/from_source.rst:142
msgid ""
"There is also a makefile in the top-level tvm directory that can automate "
"several of these steps.  It will create the build directory, copy the "
"default ``config.cmake`` to the build directory, run cmake, then run make."
msgstr ""

#: ../../_staging/install/from_source.rst:147
msgid ""
"The build directory can be specified using the environment variable "
"``TVM_BUILD_PATH``.  If ``TVM_BUILD_PATH`` is unset, the makefile assumes "
"that the ``build`` directory inside tvm should be used.  Paths specified by "
"``TVM_BUILD_PATH`` can be either absolute paths or paths relative to the "
"base tvm directory. ``TVM_BUILD_PATH`` can also be set to a list of space-"
"separated paths, in which case all paths listed will be built."
msgstr ""

#: ../../_staging/install/from_source.rst:155
msgid ""
"If an alternate build directory is used, then the environment variable "
"``TVM_LIBRARY_PATH`` should be set at runtime, pointing to the location of "
"the compiled ``libtvm.so`` and ``libtvm_runtime.so``.  If not set, tvm will "
"look relative to the location of the tvm python module.  Unlike "
"``TVM_BUILD_PATH``, this must be an absolute path."
msgstr ""

#: ../../_staging/install/from_source.rst:176
msgid ""
"If everything goes well, we can go to :ref:`python-package-installation`"
msgstr ""

#: ../../_staging/install/from_source.rst:181
msgid "Building with a Conda Environment"
msgstr ""

#: ../../_staging/install/from_source.rst:183
msgid ""
"Conda is a very handy way to the necessary obtain dependencies needed for "
"running TVM. First, follow the `conda's installation guide "
"<https://docs.conda.io/projects/conda/en/latest/user-guide/install/>`_ to "
"install miniconda or anaconda if you do not yet have conda in your system. "
"Run the following command in a conda environment:"
msgstr ""

#: ../../_staging/install/from_source.rst:194
msgid ""
"The above command will install all necessary build dependencies such as "
"cmake and LLVM. You can then run the standard build process in the last "
"section."
msgstr ""

#: ../../_staging/install/from_source.rst:196
msgid ""
"If you want to use the compiled binary outside the conda environment, you "
"can set LLVM to static linking mode ``set(USE_LLVM \"llvm-config --link-"
"static\")``. In this way, the resulting library won't depend on the dynamic "
"LLVM libraries in the conda environment."
msgstr ""

#: ../../_staging/install/from_source.rst:200
msgid ""
"The above instructions show how to use conda to provide the necessary build "
"dependencies to build libtvm. If you are already using conda as your package"
" manager and wish to directly build and install tvm as a conda package, you "
"can follow the instructions below:"
msgstr ""

#: ../../_staging/install/from_source.rst:210
msgid "Building on Windows"
msgstr ""

#: ../../_staging/install/from_source.rst:211
msgid ""
"TVM support build via MSVC using cmake. You will need to ontain a visual "
"studio compiler. The minimum required VS version is **Visual Studio "
"Community 2015 Update 3**. We recommend following :ref:`build-with-conda` to"
" obtain necessary dependencies and get an activated tvm-build environment. "
"Then you can run the following command to build"
msgstr ""

#: ../../_staging/install/from_source.rst:223
msgid ""
"The above command generates the solution file under the build directory. You"
" can then run the following command to build"
msgstr ""

#: ../../_staging/install/from_source.rst:232
msgid "Building ROCm support"
msgstr ""

#: ../../_staging/install/from_source.rst:234
msgid ""
"Currently, ROCm is supported only on linux, so all the instructions are "
"written with linux in mind."
msgstr ""

#: ../../_staging/install/from_source.rst:236
msgid "Set ``set(USE_ROCM ON)``, set ROCM_PATH to the correct path."
msgstr ""

#: ../../_staging/install/from_source.rst:237
msgid ""
"You need to first install HIP runtime from ROCm. Make sure the installation "
"system has ROCm installed in it."
msgstr ""

#: ../../_staging/install/from_source.rst:238
msgid ""
"Install latest stable version of LLVM (v6.0.1), and LLD, make sure "
"``ld.lld`` is available via command line."
msgstr ""

#: ../../_staging/install/from_source.rst:243
msgid "Python Package Installation"
msgstr ""

#: ../../_staging/install/from_source.rst:246
msgid "TVM package"
msgstr ""

#: ../../_staging/install/from_source.rst:248
msgid ""
"Depending on your development environment, you may want to use a virtual "
"environment and package manager, such as ``virtualenv`` or ``conda``, to "
"manage your python packages and dependencies."
msgstr ""

#: ../../_staging/install/from_source.rst:251
msgid "to install and maintain your python development environment."
msgstr ""

#: ../../_staging/install/from_source.rst:253
msgid ""
"The python package is located at `tvm/python` There are two ways to install "
"the package:"
msgstr ""

#: ../../_staging/install/from_source.rst:268
msgid "Method 1"
msgstr ""

#: ../../_staging/install/from_source.rst:257
msgid ""
"This method is **recommended for developers** who may change the codes."
msgstr ""

#: ../../_staging/install/from_source.rst:259
msgid ""
"Set the environment variable `PYTHONPATH` to tell python where to find the "
"library. For example, assume we cloned `tvm` on the directory `/path/to/tvm`"
" then we can add the following line in `~/.bashrc`. The changes will be "
"immediately reflected once you pull the code and rebuild the project (no "
"need to call ``setup`` again)"
msgstr ""

#: ../../_staging/install/from_source.rst:280
msgid "Method 2"
msgstr ""

#: ../../_staging/install/from_source.rst:271
msgid "Install TVM python bindings by `setup.py`:"
msgstr ""

#: ../../_staging/install/from_source.rst:283
msgid "Python dependencies"
msgstr ""

#: ../../_staging/install/from_source.rst:285
msgid ""
"Note that the ``--user`` flag is not necessary if you're installing to a "
"managed local environment, like ``virtualenv``."
msgstr ""

#: ../../_staging/install/from_source.rst:288
msgid "Necessary dependencies:"
msgstr ""

#: ../../_staging/install/from_source.rst:294
msgid "If you want to use RPC Tracker"
msgstr ""

#: ../../_staging/install/from_source.rst:300
msgid "If you want to use auto-tuning module"
msgstr ""

#: ../../_staging/install/from_source.rst:306
msgid ""
"Note on M1 macs, you may have trouble installing xgboost / scipy. scipy and "
"xgboost requires some additional dependencies to be installed, including "
"openblas and its dependencies. Use the following commands to install scipy "
"and xgboost with the required dependencies and configuration. A workaround "
"for this is to do the following commands:"
msgstr ""

#: ../../_staging/install/from_source.rst:323
msgid "Install Contrib Libraries"
msgstr ""

#: ../../_staging/install/from_source.rst:334
msgid "Enable C++ Tests"
msgstr ""

#: ../../_staging/install/from_source.rst:335
msgid ""
"We use `Google Test <https://github.com/google/googletest>`_ to drive the "
"C++ tests in TVM. The easiest way to install GTest is from source."
msgstr ""

#: ../../_staging/install/from_source.rst:349
msgid ""
"After installing GTest, the C++ tests can be built and started with "
"``./tests/scripts/task_cpp_unittest.sh`` or just built with ``make "
"cpptest``."
msgstr ""
