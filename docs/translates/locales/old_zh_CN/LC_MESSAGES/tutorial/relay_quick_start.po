# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# HLearning, 2021
# Xiaoyu Zhang, 2021
# 安杰 许, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1734+gca660ba1e\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-12 10:06+0000\n"
"PO-Revision-Date: 2021-10-13 01:40+0000\n"
"Last-Translator: 安杰 许, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124815/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/tutorial/relay_quick_start.rst:4
msgid ""
"Click :ref:`here <sphx_glr_download_tutorial_relay_quick_start.py>` to "
"download the full example code"
msgstr ""

#: ../../_staging/tutorial/relay_quick_start.rst:13
msgid "Quick Start Tutorial for Compiling Deep Learning Models"
msgstr "编译深度学习模型的快速开始教程"

#: ../../_staging/tutorial/relay_quick_start.rst:14
msgid ""
"**Author**: `Yao Wang <https://github.com/kevinthesun>`_, `Truman Tian "
"<https://github.com/SiNZeRo>`_"
msgstr ""

#: ../../_staging/tutorial/relay_quick_start.rst:16
msgid ""
"This example shows how to build a neural network with Relay python frontend "
"and generates a runtime library for Nvidia GPU with TVM. Notice that you "
"need to build TVM with cuda and llvm enabled."
msgstr ""
"这个例子展示了如何使用Relay的Python前端来构建一个神经网络并且通过TVM产生一个NVIDIA "
"GPU的运行时库。需要注意的是你需要在启用cuda和llvm的情况下编译TVM。"

#: ../../_staging/tutorial/relay_quick_start.rst:21
msgid "Overview for Supported Hardware Backend of TVM"
msgstr "TVM支持的硬件后端概览"

#: ../../_staging/tutorial/relay_quick_start.rst:22
msgid "The image below shows hardware backend currently supported by TVM:"
msgstr "下面的图片展示了TVM现在支持的硬件后端："

#: ../../_staging/tutorial/relay_quick_start.rst:27
msgid ""
"In this tutorial, we'll choose cuda and llvm as target backends. To begin "
"with, let's import Relay and TVM."
msgstr "在这个教程中，我们会选择cuda和llvm作为目标后端。首先，让我们导入 Relay 和 TVM。 "

#: ../../_staging/tutorial/relay_quick_start.rst:50
msgid "Define Neural Network in Relay"
msgstr "在Relay中定义神经网络"

#: ../../_staging/tutorial/relay_quick_start.rst:51
msgid ""
"First, let's define a neural network with relay python frontend. For "
"simplicity, we'll use pre-defined resnet-18 network in Relay. Parameters are"
" initialized with Xavier initializer. Relay also supports other model "
"formats such as MXNet, CoreML, ONNX and Tensorflow."
msgstr ""
"首先，我们先基于Relay的Python前端定义一个神经网络。简单起见，我们将在Relay中使用预训练的ResNet-"
"18网络。参数使用Xavier初始化方法进行初始化。Relay也支持其它的模型格式比如MxNet，CoreML，ONNX和TensorFlow。"

#: ../../_staging/tutorial/relay_quick_start.rst:57
msgid ""
"In this tutorial, we assume we will do inference on our device and the batch"
" size is set to be 1. Input images are RGB color images of size 224 * 224. "
"We can call the :py:meth:`tvm.relay.expr.TupleWrapper.astext()` to show the "
"network structure."
msgstr ""
"在这个教程中，我们假设我们将要在设备上做推理并且BatchSize被指定为1。输入图片是224*224大小的RGB图片。我们可以调用:py:meth:`tvm.relay.expr.TupleWrapper.astext()`"
" 方法来展示模型结构。"

#: ../../_staging/tutorial/relay_quick_start.rst:86
#: ../../_staging/tutorial/relay_quick_start.rst:254
#: ../../_staging/tutorial/relay_quick_start.rst:286
#: ../../_staging/tutorial/relay_quick_start.rst:317
msgid "Out:"
msgstr "输出:"

#: ../../_staging/tutorial/relay_quick_start.rst:189
msgid "Compilation"
msgstr "编译"

#: ../../_staging/tutorial/relay_quick_start.rst:190
msgid ""
"Next step is to compile the model using the Relay/TVM pipeline. Users can "
"specify the optimization level of the compilation. Currently this value can "
"be 0 to 3. The optimization passes include operator fusion, pre-computation,"
" layout transformation and so on."
msgstr ""
"下一步是使用Relay/TVM的pipeline来编译模型。用户可以指定编译的优化级别。目前这个值可以是0到3中的一个。优化passes中包括算符融合，预计算，数据排布变换等等。"

#: ../../_staging/tutorial/relay_quick_start.rst:195
msgid ""
":py:func:`relay.build` returns three components: the execution graph in json"
" format, the TVM module library of compiled functions specifically for this "
"graph on the target hardware, and the parameter blobs of the model. During "
"the compilation, Relay does the graph-level optimization while TVM does the "
"tensor-level optimization, resulting in an optimized runtime module for "
"model serving."
msgstr ""
":py:func:`relay.build` "
"的返回值由三部分组成：json格式的执行图，在目标硬件上专为执行图编译的模块库，以及模型的参数。在编译过程中，在Relay做图级别的优化同时TVM做张量级别的优化，从而为模型服务产生一个优化后的运行时模块。"

#: ../../_staging/tutorial/relay_quick_start.rst:202
msgid ""
"We'll first compile for Nvidia GPU. Behind the scene, :py:func:`relay.build`"
" first does a number of graph-level optimizations, e.g. pruning, fusing, "
"etc., then registers the operators (i.e. the nodes of the optimized graphs) "
"to TVM implementations to generate a `tvm.module`. To generate the module "
"library, TVM will first transfer the high level IR into the lower intrinsic "
"IR of the specified target backend, which is CUDA in this example. Then the "
"machine code will be generated as the module library."
msgstr ""
"我们首先为Nvidia GPU编译。:py:func:`relay.build` "
"首先执行了一些图级别的优化如裁剪，融合等等，然后将算子（即优化后的图的节点）注册到TVM实现中生成一个 `tvm.module`。为了生成module "
"library，TVM首先将高级别的IR转化到指定目标后端的低级别的指令集IR，在这个例子中为CUDA。然后将生成的机器码作为module "
"library。"

#: ../../_staging/tutorial/relay_quick_start.rst:226
msgid "Run the generate library"
msgstr "运行产生的库"

#: ../../_staging/tutorial/relay_quick_start.rst:227
msgid "Now we can create graph executor and run the module on Nvidia GPU."
msgstr "现在我们可以创建图形执行器并在 Nvidia GPU 上运行这个module。 "

#: ../../_staging/tutorial/relay_quick_start.rst:264
msgid "Save and Load Compiled Module"
msgstr "保存和加载编译好的模块"

#: ../../_staging/tutorial/relay_quick_start.rst:265
msgid ""
"We can also save the graph, lib and parameters into files and load them back"
" in deploy environment."
msgstr "我们还可以将计算图、库和参数保存到文件中，然后在部署环境中加载它们。 "

#: ../../_staging/tutorial/relay_quick_start.rst:339
msgid ""
":download:`Download Python source code: relay_quick_start.py "
"<relay_quick_start.py>`"
msgstr ""

#: ../../_staging/tutorial/relay_quick_start.rst:345
msgid ""
":download:`Download Jupyter notebook: relay_quick_start.ipynb "
"<relay_quick_start.ipynb>`"
msgstr ""

#: ../../_staging/tutorial/relay_quick_start.rst:352
msgid ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
