# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# HLearning, 2021
# Xiaoyu Zhang, 2021
# juzi, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.8.dev1734+gca660ba1e\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-12 10:06+0000\n"
"PO-Revision-Date: 2021-10-13 01:40+0000\n"
"Last-Translator: juzi, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/TVMChinese/teams/124815/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:4
msgid ""
"Click :ref:`here <sphx_glr_download_tutorial_cross_compilation_and_rpc.py>` "
"to download the full example code"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:13
msgid "Cross Compilation and RPC"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:14
msgid ""
"**Author**: `Ziheng Jiang <https://github.com/ZihengJiang/>`_, `Lianmin "
"Zheng <https://github.com/merrymercy/>`_"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:16
msgid ""
"This tutorial introduces cross compilation and remote device execution with "
"RPC in TVM."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:19
msgid ""
"With cross compilation and RPC, you can **compile a program on your local "
"machine then run it on the remote device**. It is useful when the remote "
"device resource are limited, like Raspberry Pi and mobile platforms. In this"
" tutorial, we will use the Raspberry Pi for a CPU example and the Firefly-"
"RK3399 for an OpenCL example."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:26
msgid "Build TVM Runtime on Device"
msgstr "在设备上构建 TVM 运行时间"

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:28
msgid "The first step is to build the TVM runtime on the remote device."
msgstr "第一步是在远程设备上构建TVM运行时间。"

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:32
msgid ""
"All instructions in both this section and the next section should be "
"executed on the target device, e.g. Raspberry Pi.  We assume the target is "
"running Linux."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:36
msgid ""
"Since we do compilation on the local machine, the remote device is only used"
" for running the generated code. We only need to build the TVM runtime on "
"the remote device."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:46
msgid ""
"After building the runtime successfully, we need to set environment "
"variables in :code:`~/.bashrc` file. We can edit :code:`~/.bashrc` using "
":code:`vi ~/.bashrc` and add the line below (Assuming your TVM directory is "
"in :code:`~/tvm`):"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:55
msgid "To update the environment variables, execute :code:`source ~/.bashrc`."
msgstr "要更新环境变量，请执行:code:`source ~/.bashrc`。"

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:58
msgid "Set Up RPC Server on Device"
msgstr "在设备上设置 RPC 服务器"

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:59
msgid ""
"To start an RPC server, run the following command on your remote device "
"(Which is Raspberry Pi in this example)."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:66
msgid ""
"If you see the line below, it means the RPC server started successfully on "
"your device."
msgstr "如果您看到下面的行，则表示RPC服务器在您的设备上成功启动。"

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:75
msgid "Declare and Cross Compile Kernel on Local Machine"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:79
msgid ""
"Now we go back to the local machine, which has a full TVM installed (with "
"LLVM)."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:82
msgid "Here we will declare a simple kernel on the local machine:"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:106
msgid ""
"Then we cross compile the kernel. The target should be 'llvm -mtriple"
"=armv7l-linux-gnueabihf' for Raspberry Pi 3B, but we use 'llvm' here to make"
" this tutorial runnable on our webpage building server. See the detailed "
"note in the following block."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:136
msgid ""
"To run this tutorial with a real remote device, change :code:`local_demo` to"
" False and replace :code:`target` in :code:`build` with the appropriate "
"target triple for your device. The target triple which might be different "
"for different devices. For example, it is :code:`'llvm -mtriple=armv7l-"
"linux-gnueabihf'` for Raspberry Pi 3B and :code:`'llvm -mtriple=aarch64"
"-linux-gnu'` for RK3399."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:143
msgid ""
"Usually, you can query the target by running :code:`gcc -v` on your device, "
"and looking for the line starting with :code:`Target:` (Though it may still "
"be a loose configuration.)"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:147
msgid ""
"Besides :code:`-mtriple`, you can also set other compilation options like:"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:150
msgid "-mcpu=<cpuname>"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:151
msgid ""
"Specify a specific chip in the current architecture to generate code for. By"
" default this is inferred from the target triple and autodetected to the "
"current architecture."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:158
msgid "-mattr=a1,+a2,-a3,..."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:153
msgid ""
"Override or control specific attributes of the target, such as whether SIMD "
"operations are enabled or not. The default set of attributes is set by the "
"current CPU. To get the list of available attributes, you can do:"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:160
msgid ""
"These options are consistent with `llc "
"<http://llvm.org/docs/CommandGuide/llc.html>`_. It is recommended to set "
"target triple and feature set to contain specific feature available, so we "
"can take full advantage of the features of the board. You can find more "
"details about cross compilation attributes from `LLVM guide of cross "
"compilation <https://clang.llvm.org/docs/CrossCompilation.html>`_."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:168
msgid "Run CPU Kernel Remotely by RPC"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:169
msgid ""
"We show how to run the generated CPU kernel on the remote device. First we "
"obtain an RPC session from remote device."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:190
msgid ""
"Upload the lib to the remote device, then invoke a device local compiler to "
"relink them. Now `func` is a remote module object."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:214
msgid ""
"When you want to evaluate the performance of the kernel on the remote "
"device, it is important to avoid the overhead of network. "
":code:`time_evaluator` will returns a remote function that runs the function"
" over number times, measures the cost per run on the remote device and "
"returns the measured cost. Network overhead is excluded."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:234
msgid "Out:"
msgstr "输出:"

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:243
msgid "Run OpenCL Kernel Remotely by RPC"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:244
msgid ""
"For remote OpenCL devices, the workflow is almost the same as above. You can"
" define the kernel, upload files, and run via RPC."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:249
msgid ""
"Raspberry Pi does not support OpenCL, the following code is tested on "
"Firefly-RK3399. You may follow this `tutorial "
"<https://gist.github.com/mli/585aed2cec0b5178b1a510f9f236afa2>`_ to setup "
"the OS and OpenCL driver for RK3399."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:253
msgid ""
"Also we need to build the runtime with OpenCL enabled on rk3399 board. In "
"the TVM root directory, execute"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:262
msgid "The following function shows how we run an OpenCL kernel remotely"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:307
msgid "Summary"
msgstr "总结"

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:308
msgid ""
"This tutorial provides a walk through of cross compilation and RPC features "
"in TVM."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:311
msgid "Set up an RPC server on the remote device."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:312
msgid ""
"Set up the target device configuration to cross compile the kernels on the "
"local machine."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:314
msgid "Upload and run the kernels remotely via the RPC API."
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:329
msgid ""
":download:`Download Python source code: cross_compilation_and_rpc.py "
"<cross_compilation_and_rpc.py>`"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:335
msgid ""
":download:`Download Jupyter notebook: cross_compilation_and_rpc.ipynb "
"<cross_compilation_and_rpc.ipynb>`"
msgstr ""

#: ../../_staging/tutorial/cross_compilation_and_rpc.rst:342
msgid ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
